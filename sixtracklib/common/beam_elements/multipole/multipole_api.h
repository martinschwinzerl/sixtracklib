#ifndef SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_API_H__
#define SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_API_H__

#if !defined( SIXTRL_NO_INCLUDES )
    #include "sixtracklib/common/beam_elements/multipole/definitions.h"
    #include "sixtracklib/common/beam_elements/multipole/multipole.h"
    #include "sixtracklib/common/internal/obj_addr_based_pointer_field.h"
    #include "sixtracklib/common/internal/type_store_traits.hpp"
    #include "sixtracklib/common/internal/type_comparison_helpers.hpp"
#endif /* !defined( SIXTRL_NO_INCLUDES ) */

#if defined( __cplusplus )
#if !defined( SIXTRL_NO_SYSTEM_INCLUDES )
    #include <type_traits>
#endif /* !defined( SIXTRL_NO_SYSTEM_INCLUDES ) */

/* ************************************************************************* */
/* ****           Add autogenerated C++ API for NS(Multipole):          **** */
/* ************************************************************************* */

namespace SIXTRL_CXX_NAMESPACE
{
    /* bal_capacity */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::be_order_t >::type
    Multipole_default_bal_capacity( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const  SIXTRL_RESTRICT /* elem */ = SIXTRL_NULLPTR ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::be_order_t{ 2 };
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::order_t >::type
    Multipole_default_bal_capacity( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const  SIXTRL_RESTRICT /* elem */ = SIXTRL_NULLPTR ) SIXTRL_NOEXCEPT
    {
        return typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::order_t{ 2 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::be_order_t >::type
    Multipole_bal_capacity( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const  SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::be_order_t{ 2 };
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_existing_type >::type
    Multipole_bal_capacity( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const  SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->bal_capacity;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::be_order_t >::type
    Multipole_max_order( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const  SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::be_order_t{ 0 };
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() ,
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::order_t >::type
    Multipole_max_order( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const  SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;

        return ( ( elem != SIXTRL_NULLPTR ) &&
                 ( st::Multipole_bal_capacity( elem ) >= order_t{ 2 } ) )
                ? ( ( st::Multipole_bal_capacity( elem ) - order_t{ 2 } )
                        >> order_t{ 1 } )
                : order_t{ 0 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_bal_capacity(
        SIXTRL_BE_ARGPTR_DEC MultipoleT*  SIXTRL_RESTRICT /* elem */,
        SIXTRL_CXX_NAMESPACE::be_size_t const /* bal_capacity */
    ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_bal_capacity(
        SIXTRL_BE_ARGPTR_DEC MultipoleT*  SIXTRL_RESTRICT elem,
        SIXTRL_CXX_NAMESPACE::be_size_t const bal_capacity ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->bal_capacity = bal_capacity;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
    Multipole_set_default_bal_capacity(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::Multipole_set_bal_capacity( elem,
                    st::Multipole_default_bal_capacity( elem ) );
    }

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  */
    /* order */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::be_order_t >::type
    Multipole_default_order( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT /* elem */ = SIXTRL_NULLPTR )
    {
        return SIXTRL_CXX_NAMESPACE::be_order_t{ 0 };
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::order_t >::type
    Multipole_default_order( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT /* elem */ = SIXTRL_NULLPTR )
    {
        return typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::order_t{ 0 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::be_order_t >::type
    Multipole_order( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::be_order_t{ 0 };
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ),
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_existing_type >::type
    Multipole_order( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->order;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_order(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /* elem */,
        OrderArg /* in_order_arg */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_order(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        OrderArg in_order_arg ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;

        order_t order;
        st::arch_status_t status = st::Types_perform_assignment< typename
            std::decay< OrderArg >::type, order_t >( order, in_order_arg );

        if( ( elem != SIXTRL_NULLPTR ) && ( order >= order_t{ 0 } ) &&
            ( status == st::ARCH_STATUS_SUCCESS ) )
        {
            st::be_size_t const new_bal_length = static_cast< st::be_size_t >(
                order_t{ 2 } * order + order_t{ 2 } );

            status = st::Multipole_set_bal_capacity( elem, new_bal_length );
            if( status == st::ARCH_STATUS_SUCCESS ) elem->order = order;
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_default_order(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_default_order(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::Multipole_set_order( elem,
                    st::Multipole_default_order( elem ) );
    }

    /*  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */
    /* length: */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
    Multipole_default_length( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const SIXTRL_RESTRICT /* elem */ = SIXTRL_NULLPTR )
    {
        return typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::real_t{ 0 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT
            >::real_t >::type
    Multipole_length( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT /*elem*/ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_default_length< MultipoleT >();
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ),
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
                >::const_existing_type >::type
    Multipole_length( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->length;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_length(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/,
        RealArg /* in_length */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_length( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg in_length )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->length = in_length;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_length(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg in_length ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->length = std::move( in_length );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_length( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                          RealArg in_length )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return ( elem != SIXTRL_NULLPTR )
            ? st::Types_perform_assignment< typename std::decay<
                RealArg >::type, typename st::MultipoleTraits<
                    MultipoleT >::real_t >( elem->length, in_length )
            : st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
    Multipole_set_default_length(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::Multipole_set_length( elem,
                        st::Multipole_default_length( elem ) );
    }

    /*  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */
    /* hxl: */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
    Multipole_default_hxl( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const SIXTRL_RESTRICT /* elem */ = SIXTRL_NULLPTR )
    {
        return typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::real_t{ 0 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT
            >::real_t >::type
    Multipole_hxl( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT /*elem*/ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_default_hxl< MultipoleT >();
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ),
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
                >::const_existing_type >::type
    Multipole_hxl( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->hxl;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_hxl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/,
        RealArg /* in_hxl */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg in_hxl )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hxl = in_hxl;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_hxl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg in_hxl ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hxl = std::move( in_hxl );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                          RealArg in_hxl )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return ( elem != SIXTRL_NULLPTR )
            ? st::Types_perform_assignment< typename std::decay<
                RealArg >::type, typename st::MultipoleTraits<
                    MultipoleT >::real_t >( elem->hxl, in_hxl )
            : st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
    Multipole_set_default_hxl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::Multipole_set_hxl( elem,
                        st::Multipole_default_hxl( elem ) );
    }

    /*  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */
    /* hyl */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
    Multipole_default_hyl( SIXTRL_BE_ARGPTR_DEC const MultipoleT
        *const SIXTRL_RESTRICT /* elem */ = SIXTRL_NULLPTR )
    {
        return typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::real_t{ 0 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT
            >::real_t >::type
    Multipole_hyl( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT /*elem*/ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_default_hyl< MultipoleT >();
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ),
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
                >::const_existing_type >::type
    Multipole_hyl( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->hyl;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_hyl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/,
        RealArg /* in_hyl */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg in_hyl )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hyl = in_hyl;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_hyl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg in_hyl ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hyl = std::move( in_hyl );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                          RealArg in_hyl )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return ( elem != SIXTRL_NULLPTR )
            ? st::Types_perform_assignment< typename std::decay<
                RealArg >::type, typename st::MultipoleTraits<
                    MultipoleT >::real_t >( elem->hyl, in_hyl )
            : st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
    Multipole_set_default_hyl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::Multipole_set_hyl( elem,
                        st::Multipole_default_hyl( elem ) );
    }

    /*  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */
    /* bal_addr: */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::be_address_t
    Multipole_default_bal_addr( SIXTRL_BE_ARGPTR_DEC const
        MultipoleT *const SIXTRL_RESTRICT /* elem */ =
            SIXTRL_NULLPTR ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::be_address_t{ 0 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::be_address_t >::type
    Multipole_bal_addr( SIXTRL_BE_ARGPTR_DEC const
        MultipoleT *const SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::Multipole_default_bal_addr< MultipoleT >();
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::be_address_t >::type
    Multipole_bal_addr( SIXTRL_BE_ARGPTR_DEC const
        MultipoleT *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->bal_addr;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_bal_addr(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/,
        SIXTRL_CXX_NAMESPACE::be_address_t const /*bal_addr*/ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_bal_addr(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        SIXTRL_CXX_NAMESPACE::be_address_t const bal_addr ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->bal_addr = bal_addr;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
    Multipole_set_default_bal_addr( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::Multipole_set_bal_addr(
            elem, st::Multipole_default_bal_addr( elem ) );
    }

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  */
    /* bal: */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
    Multipole_bal_length( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;
        return order_t{ 2 } * st::Multipole_order( elem ) + order_t{ 2 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_BE_DATAPTR_DEC typename
            SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
                SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
                    >::const_pointer >::type
    Multipole_const_bal_begin( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_NULLPTR;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ),
        SIXTRL_BE_DATAPTR_DEC typename
            SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
                SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
                     >::const_pointer >::type
    Multipole_const_bal_begin( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
            SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t real_t;
        typedef SIXTRL_BE_DATAPTR_DEC typename st::TypeMethodParamTraits<
                    real_t >::const_pointer ptr_t;

        return st::ObjData_field_ptr_to_begin_from_addr< MultipoleT, ptr_t >(
            st::Multipole_bal_addr( elem ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_BE_DATAPTR_DEC typename
            SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
                SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
                     >::const_pointer >::type
    Multipole_const_bal_end( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_NULLPTR;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ),
        SIXTRL_BE_DATAPTR_DEC typename
            SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
                SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
                    >::const_pointer >::type
    Multipole_const_bal_end( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
            SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t real_t;
        typedef SIXTRL_BE_DATAPTR_DEC typename st::TypeMethodParamTraits<
                    real_t >::const_pointer ptr_t;

        return st::ObjData_field_ptr_to_end_from_addr< MultipoleT, ptr_t >(
            st::Multipole_bal_addr( elem ),
            st::Multipole_bal_length( elem ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
            >::const_existing_type
    Multipole_bal( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
            SIXTRL_RESTRICT elem,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<  typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type idx ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t real_t;
        typedef SIXTRL_BE_DATAPTR_DEC typename st::TypeMethodParamTraits<
                    real_t >::const_pointer ptr_t;

        SIXTRL_ASSERT( idx >= typename st::MultipoleTraits<
                            MultipoleT >::order_t{ 0 } );
        SIXTRL_ASSERT( st::Multipole_bal_length( elem ) >=
                typename st::MultipoleTraits< MultipoleT >::order_t{ 0 } );

        return st::ObjData_get_field_value_from_addr< MultipoleT, ptr_t >(
            st::Multipole_bal_addr( elem ), st::Multipole_bal_length( elem ),
                static_cast< st::be_size_t >( idx ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_BE_DATAPTR_DEC typename
        SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
                >::pointer
    Multipole_bal_begin(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t real_t;
        typedef SIXTRL_BE_DATAPTR_DEC typename st::TypeMethodParamTraits<
                    real_t >::pointer ptr_t;

        return const_cast< ptr_t >( st::Multipole_const_bal_begin( elem ) );
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_BE_DATAPTR_DEC typename
        SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t >::pointer
    Multipole_bal_end(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t real_t;
        typedef SIXTRL_BE_DATAPTR_DEC typename st::TypeMethodParamTraits<
                    real_t >::pointer ptr_t;

        return const_cast< ptr_t >( st::Multipole_const_bal_end( elem ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
    Multipole_set_bal_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        SIXTRL_CXX_NAMESPACE::be_size_t const idx, RealArg in_bal_value )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::ObjData_set_field_value_for_addr<
            MultipoleT, typename st::TypeMethodParamTraits< typename
            st::MultipoleTraits< MultipoleT >::real_t >::pointer, RealArg >(
                st::Multipole_bal_addr( elem ), st::Multipole_bal_length( elem ),
                    idx, in_bal_value );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
    Multipole_set_all_bal_values(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg in_bal_value )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::ObjData_set_all_field_values_for_addr<
            MultipoleT, typename st::TypeMethodParamTraits< typename
            st::MultipoleTraits< MultipoleT >::real_t >::pointer, RealArg >(
                st::Multipole_bal_addr( elem ),
                    st::Multipole_bal_length( elem ), in_bal_value );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
    Multipole_set_bal(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealIter in_bal_values_begin )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::ObjData_set_field_values_from_range_for_addr<
            MultipoleT, typename st::TypeMethodParamTraits< typename
            st::MultipoleTraits< MultipoleT >::real_t >::pointer, RealIter >(
                st::Multipole_bal_addr( elem ),
                    st::Multipole_bal_length( elem ), in_bal_values_begin );
    }

} /* Namespace SIXTRL_CXX_NAMESPACE */

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* bal_capacity */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
NS(Multipole_default_bal_capacity)( SIXTRL_BE_ARGPTR_DEC const MultipoleT
    *const  SIXTRL_RESTRICT elem = SIXTRL_NULLPTR  ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_default_bal_capacity( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
        >::const_existing_type
NS(Multipole_bal_capacity)( SIXTRL_BE_ARGPTR_DEC const MultipoleT
    *const  SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_capacity( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
NS(Multipole_max_order)( SIXTRL_BE_ARGPTR_DEC const MultipoleT
    *const  SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_max_order( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT*  SIXTRL_RESTRICT elem,
    SIXTRL_CXX_NAMESPACE::be_size_t const bal_capacity ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_bal_capacity(
        elem, bal_capacity );
}
template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_default_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_default_bal_capacity( elem );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* order */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::be_order_t
NS(Multipole_default_order)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_default_order( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::be_order_t
NS(Multipole_order)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_order( elem );
}

template< class MultipoleT, typename OrderArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_order)( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    OrderArg in_order_arg ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_order( elem, in_order_arg );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_default_order)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_default_order( elem );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* length: */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
NS(Multipole_default_length)( SIXTRL_BE_ARGPTR_DEC const MultipoleT
    *const SIXTRL_RESTRICT elem = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_default_length( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
NS(Multipole_length)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_length( elem );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_length)( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                          RealArg in_length )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_length( elem, in_length );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_default_length)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_default_length( elem );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* hxl: */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
NS(Multipole_default_hxl)( SIXTRL_BE_ARGPTR_DEC const MultipoleT
    *const SIXTRL_RESTRICT elem = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_default_hxl( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
            >::const_existing_type
NS(Multipole_hxl)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_hxl( elem );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_hxl)( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    RealArg in_hxl )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_hxl( elem, in_hxl );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_default_hxl)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_default_hxl( elem );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* hyl */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
NS(Multipole_default_hyl)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_default_hyl( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
            >::const_existing_type
NS(Multipole_hyl)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_hyl( elem );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_hyl)( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    RealArg in_hyl )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_hyl( elem, in_hyl );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_default_hyl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_default_hyl( elem );
}

/*  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  */
/* bal_addr: */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::be_address_t
NS(Multipole_default_bal_addr)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem = SIXTRL_NULLPTR ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_default_bal_addr( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::be_address_t
NS(Multipole_bal_addr)( SIXTRL_BE_ARGPTR_DEC const
    MultipoleT *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_addr( elem );
}
template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_bal_addr)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    SIXTRL_CXX_NAMESPACE::be_address_t const bal_addr ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_bal_addr( elem, bal_addr );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_default_bal_addr)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_default_bal_addr( elem );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* bal: */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
NS(Multipole_bal_length)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_length( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_BE_DATAPTR_DEC typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
            >::const_pointer
NS(Multipole_const_bal_begin)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_const_bal_begin( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_BE_DATAPTR_DEC typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
            >::const_pointer
NS(Multipole_const_bal_end)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_const_bal_end( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
        >::const_existing_type
NS(Multipole_bal)( SIXTRL_BE_ARGPTR_DEC const MultipoleT *const
        SIXTRL_RESTRICT elem,
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<  typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
            >::const_argument_type idx ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal( elem, idx );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_BE_DATAPTR_DEC typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t >::pointer
NS(Multipole_bal_begin)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( elem );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_BE_DATAPTR_DEC typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t >::pointer
NS(Multipole_bal_end)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_end( elem );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_bal_value)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    SIXTRL_CXX_NAMESPACE::be_size_t const idx, RealArg in_bal_value )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_bal_value(
        elem, idx, in_bal_value );
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_all_bal_values)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg in_bal_value )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_all_bal_values(
        elem, in_bal_value );
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

template< class MultipoleT, typename RealIter >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_bal)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    RealIter in_bal_values_begin )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_bal( elem, in_bal_values_begin );
}

#endif /* C++ */

#if defined( __cplusplus ) && !defined( _GPUCODE )
extern "C" {
#endif /* C++, Host */

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* bal_capacity */

SIXTRL_STATIC SIXTRL_FN NS(be_order_t) NS(Multipole_default_bal_capacity)(
    void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(be_order_t) NS(Multipole_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const  SIXTRL_RESTRICT elem
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(be_order_t) NS(Multipole_max_order)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const  SIXTRL_RESTRICT elem
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)*  SIXTRL_RESTRICT elem,
    NS(be_size_t) const bal_capacity ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t)
NS(Multipole_set_default_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* order */

SIXTRL_STATIC SIXTRL_FN NS(be_order_t) NS(Multipole_default_order)(
    void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(be_order_t) NS(Multipole_order)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const order ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_default_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* length: */

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_default_length)(
    void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_length)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const length ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_default_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* hxl: */

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_default_hxl)(
    void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_hxl)( SIXTRL_BE_ARGPTR_DEC
    const NS(Multipole) *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const hxl ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_default_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* hyl */

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_default_hyl)(
    void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_hyl)( SIXTRL_BE_ARGPTR_DEC
    const NS(Multipole) *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const hyl ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_default_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/*  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  */
/* bal_addr: */

SIXTRL_STATIC SIXTRL_FN NS(be_address_t) NS(Multipole_default_bal_addr)(
    void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(be_address_t) NS(Multipole_bal_addr)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_bal_addr)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_default_bal_addr)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* bal: */

SIXTRL_STATIC SIXTRL_FN NS(be_order_t) NS(Multipole_bal_length)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const*
NS(Multipole_const_bal_begin)( SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const*
NS(Multipole_const_bal_end)( SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_bal)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem,
    NS(be_order_t) const idx ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN SIXTRL_BE_DATAPTR_DEC NS(be_real_t)*
NS(Multipole_bal_begin)( SIXTRL_BE_ARGPTR_DEC NS(Multipole)*
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN SIXTRL_BE_DATAPTR_DEC NS(be_real_t)*
NS(Multipole_bal_end)( SIXTRL_BE_ARGPTR_DEC NS(Multipole)*
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_bal_value)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const idx, NS(be_real_t) const in_bal_value
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_all_bal_values)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const in_bal_value ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* SIXTRL_RESTRICT
        in_bal_values_begin ) SIXTRL_NOEXCEPT;

#if defined( __cplusplus ) && !defined( _GPUCODE )
}
#endif /* C++, Host */

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/* !!!!!        Implementation of inline methods / functions            !!!! */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

#if defined( __cplusplus ) && !defined( _GPUCODE )
extern "C" {
#endif /* C++, Host */

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* bal_capacity */

SIXTRL_INLINE NS(be_order_t) NS(Multipole_default_bal_capacity)(
    void ) SIXTRL_NOEXCEPT
{
    return ( NS(be_order_t) )2;
}

SIXTRL_INLINE NS(be_order_t) NS(Multipole_bal_capacity)( SIXTRL_BE_ARGPTR_DEC
    const NS(Multipole) *const  SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    return elem->bal_capacity;
}

SIXTRL_INLINE NS(be_order_t) NS(Multipole_max_order)( SIXTRL_BE_ARGPTR_DEC
    const NS(Multipole) *const  SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( elem->bal_capacity >= ( NS(be_order_t) )2 );
    return ( elem->bal_capacity - ( NS(be_order_t) )2 ) / ( NS(be_order_t) )2;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)*  SIXTRL_RESTRICT elem,
    NS(be_size_t) const bal_capacity ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( bal_capacity >= ( NS(be_order_t) )2 );
    elem->bal_capacity = bal_capacity;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_default_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return NS(Multipole_set_bal_capacity)(
        elem, NS(Multipole_default_bal_capacity)() );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* order */

SIXTRL_INLINE NS(be_order_t) NS(Multipole_default_order)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(be_order_t) )0;
}

SIXTRL_INLINE NS(be_order_t) NS(Multipole_order)( SIXTRL_BE_ARGPTR_DEC const
    NS(Multipole) *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    return elem->order;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const order ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( order >= ( NS(be_order_t) )0 );
    elem->order = order;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_default_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return NS(Multipole_set_order)( elem, NS(Multipole_default_order)() );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* length: */

SIXTRL_INLINE NS(be_real_t) NS(Multipole_default_length)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(be_real_t) )0;
}

SIXTRL_INLINE NS(be_real_t) NS(Multipole_length)( SIXTRL_BE_ARGPTR_DEC const
    NS(Multipole) *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    return elem->length;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_length)( SIXTRL_BE_ARGPTR_DEC
    NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const length ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( length >= ( NS(be_real_t) )0 );
    elem->length = length;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_default_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return NS(Multipole_set_length)( elem, NS(Multipole_default_length)() );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* hxl: */

SIXTRL_INLINE NS(be_real_t) NS(Multipole_default_hxl)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(be_real_t) )0;
}

SIXTRL_INLINE NS(be_real_t) NS(Multipole_hxl)( SIXTRL_BE_ARGPTR_DEC const
    NS(Multipole) *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    return elem->hxl;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_hxl)( SIXTRL_BE_ARGPTR_DEC
    NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const hxl ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( hxl >= ( NS(be_real_t) )0 );
    elem->hxl = hxl;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_default_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return NS(Multipole_set_hxl)( elem, NS(Multipole_default_hxl)() );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* hyl */

SIXTRL_INLINE NS(be_real_t) NS(Multipole_default_hyl)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(be_real_t) )0;
}

SIXTRL_INLINE NS(be_real_t) NS(Multipole_hyl)( SIXTRL_BE_ARGPTR_DEC const
    NS(Multipole) *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    return elem->hyl;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_hyl)( SIXTRL_BE_ARGPTR_DEC
    NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const hyl ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( hyl >= ( NS(be_real_t) )0 );
    elem->hyl = hyl;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_default_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return NS(Multipole_set_hyl)( elem, NS(Multipole_default_hyl)() );
}

/*  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  */
/* bal_addr: */

SIXTRL_INLINE NS(be_address_t) NS(Multipole_default_bal_addr)(
    void ) SIXTRL_NOEXCEPT
{
    return ( NS(be_address_t) )0;
}

SIXTRL_INLINE NS(be_address_t) NS(Multipole_bal_addr)( SIXTRL_BE_ARGPTR_DEC
    const NS(Multipole) *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    return elem->bal_addr;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_bal_addr)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->bal_addr = bal_addr;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_default_bal_addr)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return NS(Multipole_set_bal_addr)( elem, NS(Multipole_default_bal_addr)() );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - */
/* bal: */

SIXTRL_INLINE NS(be_order_t) NS(Multipole_bal_length)( SIXTRL_BE_ARGPTR_DEC
    const NS(Multipole) *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( elem->order >= ( NS(be_order_t) )0 );
    return ( NS(be_order_t) )2 * elem->order + ( NS(be_order_t) )2;
}

SIXTRL_INLINE SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const*
NS(Multipole_const_bal_begin)( SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return ( SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* )( uintptr_t
        )NS(Multipole_bal_addr)( elem );
}

SIXTRL_INLINE SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const*
NS(Multipole_const_bal_end)( SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const
    SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* end_ptr =
        NS(Multipole_const_bal_begin)( elem );

    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( elem->order >= ( NS(be_order_t) )0 );
    SIXTRL_ASSERT( NS(Multipole_bal_length)( elem ) >= ( NS(be_order_t) )0 );

    if( end_ptr != SIXTRL_NULLPTR )
        end_ptr = end_ptr + NS(Multipole_bal_length)( elem );

    return end_ptr;
}

SIXTRL_INLINE NS(be_real_t) NS(Multipole_bal)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem,
    NS(be_order_t) const idx ) SIXTRL_NOEXCEPT
{
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* ptr =
        NS(Multipole_const_bal_begin)( elem );

    SIXTRL_ASSERT( idx >= ( NS(be_order_t) )0 );
    SIXTRL_ASSERT( NS(Multipole_bal_length)( elem ) >= ( NS(be_order_t) )0 );
    SIXTRL_ASSERT( NS(Multipole_bal_length)( elem ) > idx );

    return ( ptr != SIXTRL_NULLPTR ) ? ptr[ idx ] : ( NS(be_real_t) )0;
}

SIXTRL_INLINE SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* NS(Multipole_bal_begin)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return ( SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* )( uintptr_t
        )NS(Multipole_bal_addr)( elem );
}

SIXTRL_INLINE SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* NS(Multipole_bal_end)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* end_ptr =
        NS(Multipole_bal_begin)( elem );

    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( elem->order >= ( NS(be_order_t) )0 );
    SIXTRL_ASSERT( NS(Multipole_bal_length)( elem ) >= ( NS(be_order_t) )0 );

    if( end_ptr != SIXTRL_NULLPTR )
        end_ptr = end_ptr + NS(Multipole_bal_length)( elem );

    return end_ptr;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_bal_value)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const idx, NS(be_real_t) const bal_value ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* ptr = NS(Multipole_bal_begin)( elem );

    if( ( elem != SIXTRL_NULLPTR ) &&
        ( idx < NS(Multipole_bal_length)( elem ) ) )
    {
        ptr[ idx ] = bal_value;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_all_bal_values)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const bal_value ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* it  = NS(Multipole_bal_begin)( elem );
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* end = NS(Multipole_bal_end)( elem );

    if( ( it != SIXTRL_NULLPTR ) && ( end != SIXTRL_NULLPTR ) )
    {
        while( it != end ) *it++ = bal_value;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* SIXTRL_RESTRICT
        bal_val_it ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* it  = NS(Multipole_bal_begin)( elem );
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t)* end = NS(Multipole_bal_end)( elem );

    if( ( it != SIXTRL_NULLPTR ) && ( end != SIXTRL_NULLPTR ) &&
        ( bal_val_it != SIXTRL_NULLPTR ) )
    {
        while( it != end ) *it++ = *bal_val_it++;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

#if defined( __cplusplus ) && !defined( _GPUCODE )
}
#endif /* C++, Host */
#endif /* SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_API_H__ */
