#ifndef SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_DATA_API_CXX_HPP__
#define SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_DATA_API_CXX_HPP__


#if !defined( SIXTRL_NO_INCLUDES )
    #include "sixtracklib/common/beam_elements/multipole/multipole_data.hpp"
    #include "sixtracklib/common/internal/type_store_traits.hpp"
#endif /* !defined( SIXTRL_NO_INCLUDES ) */

#if defined( __cplusplus )
namespace SIXTRL_CXX_NAMESPACE
{
    /* ********************************************************************* */
    /** SixTrackLib: Add autogenerated C++ API */
    /* ********************************************************************* */

    /* init API: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
    Multipole_preset(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        typename TypeMethodParamTraits< typename MultipoleTraits<
            MultipoleData< R, O, RAlign, OAlign > >::order_t
                >::const_argument_type order ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN void Multipole_init(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        typename TypeMethodParamTraits< typename MultipoleTraits< MultipoleData<
            R, O, RAlign, OAlign > >::order_t >::const_argument_type order
    ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              class LengthArg, class HxlArg, class HylArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_init_detailed(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        typename TypeMethodParamTraits< typename MultipoleTraits< MultipoleData<
            R, O, RAlign, OAlign > >::order_t >::const_argument_type order,
        LengthArg length, HxlArg hxl, HylArg hyl,
        ::NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              class LengthArg, class HxlArg, class HylArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_init(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        typename TypeMethodParamTraits< typename MultipoleTraits< MultipoleData<
            R, O, RAlign, OAlign > >::order_t >::const_argument_type order,
        LengthArg length, HxlArg hxl, HylArg hyl,
        ::NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT;

    /* getter API, ptr argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::order_t >::const_existing_type
    Multipole_order( SIXTRL_BE_ARGPTR_DEC const
        MultipoleData< R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem
    ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename MultipoleTraits< MultipoleData<
        R, O, RAlign, OAlign > >::order_t
    Multipole_bal_length( SIXTRL_BE_ARGPTR_DEC const
        MultipoleData< R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem
    ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_length( SIXTRL_BE_ARGPTR_DEC const
        MultipoleData< R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem
    ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_hxl( SIXTRL_BE_ARGPTR_DEC const
        MultipoleData< R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem
    ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_hyl( SIXTRL_BE_ARGPTR_DEC const
        MultipoleData< R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem
    ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN ::NS(be_address_t) Multipole_bal_addr(
        SIXTRL_BE_ARGPTR_DEC const MultipoleData< R, O, RAlign, OAlign >
            *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    /* getter API for ptr fields, ptr argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_pointer
    Multipole_bal_const_begin( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_pointer
    Multipole_bal_const_end( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::pointer
    Multipole_bal_begin( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::pointer
    Multipole_bal_end( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_bal( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
            R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem,
        ::NS(be_size_t) const index ) SIXTRL_NOEXCEPT;

    /* setter API, ptr argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename LengthArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_length(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, LengthArg length );

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename HxlArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_hxl(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, HxlArg hxl );

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign ,
              typename HylArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_hyl(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, HylArg hyl );

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_bal_addr(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        ::NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT;

    /* setter API for ptr fields, ptr argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename BalIter >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_bal(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, BalIter bal_values_begin );

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename BalArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_bal_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        ::NS(be_size_t) const bal_index, BalArg bal );

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    /* getter API, ref argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::order_t >::const_existing_type
    Multipole_order( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename MultipoleTraits< MultipoleData<
        R, O, RAlign, OAlign > >::order_t
    Multipole_bal_length( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_length( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN ::NS(be_address_t) Multipole_bal_addr(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign > const&
            SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    /* getter API for ptr fields, ref argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_pointer
    Multipole_bal_const_begin( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_pointer
    Multipole_bal_const_end( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::pointer
    Multipole_bal_begin( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::pointer
    Multipole_bal_end( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_bal( SIXTRL_BE_ARGPTR_DEC MultipoleData<
            R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem,
        ::NS(be_size_t) const index ) SIXTRL_NOEXCEPT;

    /* setter API, ref argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename LengthArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_length(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >&
            SIXTRL_RESTRICT elem, LengthArg length );

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename HxlArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_hxl(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >&
            SIXTRL_RESTRICT elem, HxlArg hxl );

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign ,
              typename HylArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_hyl(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >&
            SIXTRL_RESTRICT elem, HylArg hyl );

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_bal_addr(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >&
            SIXTRL_RESTRICT elem,
        ::NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT;

    /* setter API for ptr fields, ref argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename BalIter >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_bal(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >&
            SIXTRL_RESTRICT elem, BalIter bal_values_begin );

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename BalArg >
    SIXTRL_STATIC SIXTRL_FN void Multipole_set_bal_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >&
            SIXTRL_RESTRICT elem, ::NS(be_size_t) const bal_index,
        BalArg bal );
}

#endif /* C++ */

/* getter API, ptr argument: */

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::order_t
            >::const_existing_type
NS(Multipole_order)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::order_t
NS(Multipole_bal_length)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_existing_type
NS(Multipole_length)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_existing_type
NS(Multipole_hxl)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_existing_type
NS(Multipole_hyl)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN ::NS(be_address_t) NS(Multipole_bal_addr)(
    SIXTRL_BE_ARGPTR_DEC const SIXTRL_CXX_NAMESPACE::MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* getter API for ptr fields, ptr argument: */

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
    >::const_pointer
NS(Multipole_bal_const_begin)(
    SIXTRL_BE_ARGPTR_DEC const SIXTRL_CXX_NAMESPACE::MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
    >::const_pointer
NS(Multipole_bal_const_end)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
    SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
    >::pointer
NS(Multipole_bal_begin)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
    >::pointer
NS(Multipole_bal_end)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
    >::const_existing_type
NS(Multipole_bal)(
    SIXTRL_BE_ARGPTR_DEC const SIXTRL_CXX_NAMESPACE::MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem,
    ::NS(be_size_t) const index ) SIXTRL_NOEXCEPT;

/* ========================================================================= */

#if defined( __cplusplus )
namespace SIXTRL_CXX_NAMESPACE
{
    /* ********************************************************************* */
    /** SixTrackLib: Add autogenerated C++ API */
    /* ********************************************************************* */

    /* init API: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
    Multipole_preset(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        typename TypeMethodParamTraits< typename MultipoleTraits<
            MultipoleData< R, O, RAlign, OAlign > >::order_t
                >::const_argument_type order ) SIXTRL_NOEXCEPT
    {
        if( elem != SIXTRL_NULLPTR )
        {
            using real_t = typename MultipoleTraits<
                MultipoleData< R, O, RAlign, OAlign > >::real_t;

            elem->order = order;

            SIXTRL_CXX_NAMESPACE::Multipole_set_length( elem, real_t{ 0 } );
            SIXTRL_CXX_NAMESPACE::Multipole_set_hxl( elem, real_t{ 0 } );
            SIXTRL_CXX_NAMESPACE::Multipole_set_hyl( elem, real_t{ 0 } );
            SIXTRL_CXX_NAMESPACE::Multipole_set_bal_addr(
                elem, ::NS(be_address_t){ 0 } );
        }

        return elem;
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE void Multipole_init(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        typename TypeMethodParamTraits< typename MultipoleTraits< MultipoleData<
            R, O, RAlign, OAlign > >::order_t >::const_argument_type order
    ) SIXTRL_NOEXCEPT
    {
        SIXTRL_CXX_NAMESPACE::Multipole_preset( elem );
        if( elem != SIXTRL_NULLPTR ) elem->order = order;
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              class LengthArg, class HxlArg, class HylArg >
    SIXTRL_INLINE void Multipole_init_detailed(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        typename TypeMethodParamTraits< typename MultipoleTraits< MultipoleData<
            R, O, RAlign, OAlign > >::order_t >::const_argument_type order,
        LengthArg length, HxlArg hxl, HylArg hyl,
        ::NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT
    {
        SIXTRL_CXX_NAMESPACE::Multipole_init( elem, order );
        SIXTRL_CXX_NAMESPACE::Multipole_set_length( elem, length );
        SIXTRL_CXX_NAMESPACE::Multipole_set_hxl( elem, hxl );
        SIXTRL_CXX_NAMESPACE::Multipole_set_hyl( elem, hyl );
        SIXTRL_CXX_NAMESPACE::Multipole_set_bal_addr( elem, bal_addr );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              class LengthArg, class HxlArg, class HylArg >
    SIXTRL_INLINE void Multipole_init(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem,
        typename TypeMethodParamTraits< typename MultipoleTraits< MultipoleData<
            R, O, RAlign, OAlign > >::order_t >::const_argument_type order,
        LengthArg length, HxlArg hxl, HylArg hyl,
        ::NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT
    {
        SIXTRL_CXX_NAMESPACE::Multipole_init_detailed(
            elem, order, length, hxl, hyl, bal_addr );
    }

    /* getter API, ptr argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::order_t >::const_existing_type
    Multipole_order( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->order;
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename MultipoleTraits< MultipoleData<
        R, O, RAlign, OAlign > >::order_t
    Multipole_bal_length( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return ( 2 * elem->order + 2 );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_length( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->length;
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_hxl( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->hxl;
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_hyl( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->hyl;
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE ::NS(be_address_t) Multipole_bal_addr(
        SIXTRL_BE_ARGPTR_DEC const MultipoleData< R, O, RAlign, OAlign >
            *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->bal_addr;
    }

    /* getter API for ptr fields, ptr argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_pointer
    Multipole_bal_const_begin( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        typedef typename MultipoleTraits< MultipoleData<
                    R, O, RAlign, OAlign > >::real_t real_t;

        typedef SIXTRL_BE_DATAPTR_DEC typename TypeMethodParamTraits<
            real_t >::const_pointer ptr_bal_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return SIXTRL_BELEM_ADDR_TO_PTR( ptr_bal_t, elem->bal_addr );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_pointer
    Multipole_bal_const_end( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        typedef typename MultipoleTraits< MultipoleData<
                    R, O, RAlign, OAlign > >::real_t real_t;

        typedef SIXTRL_BE_DATAPTR_DEC typename TypeMethodParamTraits<
            real_t >::const_pointer ptr_bal_t;

        ptr_bal_t pend =
            SIXTRL_CXX_NAMESPACE::Multipole_bal_const_begin( elem );

        if( pend != SIXTRL_NULLPTR )
            pend = pend + SIXTRL_CXX_NAMESPACE::Multipole_bal_length( elem );

        return pend;
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::pointer
    Multipole_bal_begin( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        typedef typename MultipoleTraits< MultipoleData<
                    R, O, RAlign, OAlign > >::real_t real_t;

        typedef SIXTRL_BE_DATAPTR_DEC typename TypeMethodParamTraits<
            real_t >::pointer ptr_bal_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return SIXTRL_BELEM_ADDR_TO_PTR( ptr_bal_t, elem->bal_addr );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::pointer
    Multipole_bal_end( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        typedef typename MultipoleTraits< MultipoleData<
                    R, O, RAlign, OAlign > >::real_t real_t;

        typedef SIXTRL_BE_DATAPTR_DEC typename TypeMethodParamTraits<
            real_t >::pointer ptr_bal_t;

        ptr_bal_t pend = SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( elem );

        if( pend != SIXTRL_NULLPTR )
            pend = pend + SIXTRL_CXX_NAMESPACE::Multipole_bal_length( elem );

        return pend;
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_bal( SIXTRL_BE_ARGPTR_DEC const MultipoleData<
            R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem,
        ::NS(be_size_t) const index ) SIXTRL_NOEXCEPT
    {
        typedef typename MultipoleTraits< MultipoleData<
                    R, O, RAlign, OAlign > >::real_t real_t;

        typedef SIXTRL_BE_DATAPTR_DEC typename TypeMethodParamTraits<
            real_t >::const_pointer ptr_bal_t;

        ptr_bal_t bal_array =
            SIXTRL_CXX_NAMESPACE::Multipole_bal_const_begin( elem );

        return ( ( bal_array != SIXTRL_NULLPTR ) &&
             ( SIXTRL_CXX_NAMESPACE::Multipole_bal_length( elem ) > index ) )
            ? bal_array[ index ] : real_t{ 0 };
    }

    /* setter API, ptr argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename LengthArg >
    SIXTRL_INLINE void Multipole_set_length(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, LengthArg length )
    {
        typedef typename std::decay< LengthArg >::type src_real_t;
        typedef typename MultipoleTraits< MultipoleData<
                    R, O, RAlign, OAlign > >::real_t real_t;

        typedef SIXTRL_BE_DATAPTR_DEC typename TypeMethodParamTraits<
            real_t >::ref_existing_type dest_real_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment<
            src_real_t, dest_real_t >( elem->length, length );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename HxlArg >
    SIXTRL_INLINE void Multipole_set_hxl(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, HxlArg hxl )
    {
        typedef typename std::decay< HxlArg >::type src_real_t;
        typedef typename MultipoleTraits< MultipoleData<
                    R, O, RAlign, OAlign > >::real_t real_t;

        typedef SIXTRL_BE_DATAPTR_DEC typename TypeMethodParamTraits<
            real_t >::ref_existing_type dest_real_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment<
            src_real_t, dest_real_t >( elem->hxl, hxl );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign ,
              typename HylArg >
    SIXTRL_INLINE void Multipole_set_hyl(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, HylArg hyl )
    {
        typedef typename std::decay< HylArg >::type src_real_t;
        typedef typename MultipoleTraits< MultipoleData<
                    R, O, RAlign, OAlign > >::real_t real_t;

        typedef SIXTRL_BE_DATAPTR_DEC typename TypeMethodParamTraits<
            real_t >::ref_existing_type dest_real_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment<
            src_real_t, dest_real_t >( elem->hyl, hyl );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE void Multipole_set_bal_addr( SIXTRL_BE_ARGPTR_DEC
        MultipoleData< R, O, RAlign, OAlign >* SIXTRL_RESTRICT elem,
        ::NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->bal_addr = bal_addr;
    }

    /* setter API for ptr fields, ptr argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename BalIter >
    SIXTRL_INLINE void Multipole_set_bal(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, BalIter bal_values_begin )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment_for_range(
            bal_values_begin,
            SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( elem ),
            SIXTRL_CXX_NAMESPACE::Multipole_bal_length( elem ) );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename BalArg >
    SIXTRL_INLINE void Multipole_set_bal_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign >*
            SIXTRL_RESTRICT elem, ::NS(be_size_t) const index, BalArg bal )
    {
        typedef typename MultipoleTraits<
            MultipoleData< R, O, RAlign, OAlign > >::real_t dest_t;

        typedef typename MultipoleTraits< ::NS(Multipole) >::real_t src_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        auto bal_array = SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( elem );

        if( ( bal_array != SIXTRL_NULLPTR ) &&
            ( SIXTRL_CXX_NAMESPACE::Multipole_bal_length( elem ) >
                static_cast< ::NS(be_order_t) >( index ) ) )
        {
            SIXTRL_CXX_NAMESPACE::Types_perform_assignment< src_t, dest_t >(
                bal_array[ index ], bal );
        }
    }

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    /* getter API, ref argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::order_t >::const_existing_type
    Multipole_order( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_order( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename MultipoleTraits< MultipoleData<
        R, O, RAlign, OAlign > >::order_t
    Multipole_bal_length( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_bal_length( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_length( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_length( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_hxl( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_hyl( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE ::NS(be_address_t) Multipole_bal_addr(
        SIXTRL_BE_ARGPTR_DEC MultipoleData< R, O, RAlign, OAlign > const&
            SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_bal_addr( &elem );
    }

    /* getter API for ptr fields, ref argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_pointer
    Multipole_bal_const_begin( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_bal_const_begin( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_pointer
    Multipole_bal_const_end( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_bal_const_end( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::pointer
    Multipole_bal_begin( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::pointer
    Multipole_bal_end( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_bal_end( &elem );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits<
        typename MultipoleTraits< MultipoleData< R, O, RAlign, OAlign >
            >::real_t >::const_existing_type
    Multipole_bal( SIXTRL_BE_ARGPTR_DEC MultipoleData<
            R, O, RAlign, OAlign > const& SIXTRL_RESTRICT elem,
        ::NS(be_size_t) const index ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_bal( &elem, index );
    }

    /* setter API, ref argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename LengthArg >
    SIXTRL_INLINE void Multipole_set_length( SIXTRL_BE_ARGPTR_DEC
        MultipoleData< R, O, RAlign, OAlign >& SIXTRL_RESTRICT elem,
        LengthArg length )
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_set_length( &elem, length );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename HxlArg >
    SIXTRL_INLINE void Multipole_set_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign >& SIXTRL_RESTRICT elem, HxlArg hxl )
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_set_hxl( &elem, hxl );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign ,
              typename HylArg >
    SIXTRL_INLINE void Multipole_set_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign >& SIXTRL_RESTRICT elem, HylArg hyl )
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_set_hyl( &elem, hyl );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign >
    SIXTRL_INLINE void Multipole_set_bal_addr( SIXTRL_BE_ARGPTR_DEC
        MultipoleData< R, O, RAlign, OAlign >& SIXTRL_RESTRICT elem,
        ::NS(be_address_t) const bal_addr ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_set_bal_addr( &elem, bal_addr );
    }

    /* setter API for ptr fields, ref argument: */

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename BalIter >
    SIXTRL_INLINE void Multipole_set_bal( SIXTRL_BE_ARGPTR_DEC MultipoleData<
        R, O, RAlign, OAlign >& SIXTRL_RESTRICT elem, BalIter bal_values_begin )
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_set_bal(
            &elem, bal_values_begin );
    }

    template< class R, class O, arch_size_t RAlign, arch_size_t OAlign,
              typename BalArg >
    SIXTRL_INLINE void Multipole_set_bal_value( SIXTRL_BE_ARGPTR_DEC
        MultipoleData< R, O, RAlign, OAlign >& SIXTRL_RESTRICT elem,
        ::NS(be_size_t) const index, BalArg bal )
    {
        return SIXTRL_CXX_NAMESPACE::Multipole_set_bal_value(
            &elem, index, bal );
    }
}

/* getter API, ptr argument: */

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::order_t
            >::const_existing_type
NS(Multipole_order)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_order( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::order_t
NS(Multipole_bal_length)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_length( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_existing_type
NS(Multipole_length)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_length( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_existing_type
NS(Multipole_hxl)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_hxl( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_existing_type
NS(Multipole_hyl)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_hyl( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_STATIC SIXTRL_FN ::NS(be_address_t) NS(Multipole_bal_addr)(
    SIXTRL_BE_ARGPTR_DEC const SIXTRL_CXX_NAMESPACE::MultipoleData<
        R, O, RAlign, OAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_addr( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_pointer
NS(Multipole_bal_const_begin)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_const_begin( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_pointer
NS(Multipole_bal_const_end)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_const_end( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::pointer
NS(Multipole_bal_const_begin)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::pointer
NS(Multipole_bal_const_end)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal_end( elem );
}

template< class R, class O, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          SIXTRL_CXX_NAMESPACE::arch_size_t OAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
        SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > >::real_t
            >::const_existing_type
NS(Multipole_bal)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::MultipoleData< R, O, RAlign, OAlign > *const
        SIXTRL_RESTRICT elem, ::NS(be_size_t) const index ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Multipole_bal( elem, index );
}

#endif /* C++ */
#endif /* SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_DATA_API_CXX_HPP__ */
