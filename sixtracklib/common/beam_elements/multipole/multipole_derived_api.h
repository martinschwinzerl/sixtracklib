#ifndef SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_DERIVED_API_H__
#define SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_DERIVED_API_H__

#if !defined( SIXTRL_NO_INCLUDES )
    #include "sixtracklib/common/beam_elements/multipole/multipole.h"
    #include "sixtracklib/common/beam_elements/multipole/multipole_api.h"
    #include "sixtracklib/common/internal/math_arithmetic.h"
    #include "sixtracklib/common/internal/math_constants.h"
    #include "sixtracklib/common/internal/math_factorial.h"
    #include "sixtracklib/common/internal/type_store_traits.hpp"
#endif /* !defined( SIXTRL_NO_INCLUDES ) */

#if defined( __cplusplus )
#if !defined( SIXTRL_NO_SYSTEM_INCLUDES )
    #include <type_traits>
#endif /* !defined( SIXTRL_NO_SYSTEM_INCLUDES ) */

/* ************************************************************************* */
/* ****           Add autogenerated C++ API for NS(Multipole):          **** */
/* ************************************************************************* */

namespace SIXTRL_CXX_NAMESPACE
{
    /* --------------------------------------------------------------------- */
    /* order */

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_order( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, OrderArg /* d_order */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_order( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, OrderArg /* d_order */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_order( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, OrderArg /* c */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_order( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_order( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, OrderArg d_order )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->order += d_order;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_order( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, OrderArg d_order )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->order -= d_order;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        arch_status_t >::type
    Multipole_scale_order( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, OrderArg c )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->order *= c;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_order( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->order = -( elem->order );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        arch_status_t >::type
    Multipole_add_to_order( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                         OrderArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< OrderArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::order_t order_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            order_t d_order;
            status = st::Types_perform_assignment< src_t, order_t >(
                d_order, arg );

            if( status == st::ARCH_STATUS_SUCCESS ) elem->order += d_order;
        }

        return status;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        arch_status_t >::type
    Multipole_subtract_from_order(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem, OrderArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< OrderArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::order_t order_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            order_t d_order;
            status = st::Types_perform_assignment< src_t, order_t >(
                d_order, arg );

            if( status == st::ARCH_STATUS_SUCCESS ) elem->order -= d_order;
        }

        return status;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_order( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                        OrderArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< OrderArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::order_t order_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            order_t c;
            status = st::Types_perform_assignment< src_t, order_t >( c, arg );
            if( status == st::ARCH_STATUS_SUCCESS ) elem->order *= c;
        }

        return status;
    }

    /* --------------------------------------------------------------------- */
    /* bal_capacity */

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_bal_capacity(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /* elem */,
        OrderArg /* delta_bal_capacity */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, OrderArg /* delta_bal_capacity */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, OrderArg /* factor */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, OrderArg /* delta_bal_capacity */ )
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /*elem*/, OrderArg /*delta_bal_capacity*/ )
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >(),
        arch_status_t >::type
    Multipole_scale_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /*elem*/, OrderArg /*factor*/ )
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /*elem*/ )
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, OrderArg delta_bal_capacity )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->bal_capacity += delta_bal_capacity;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, OrderArg delta_bal_capacity )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->bal_capacity -= delta_bal_capacity;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        arch_status_t >::type
    Multipole_scale_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, OrderArg factor )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->bal_capacity *= factor;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->bal_capacity = -( elem->bal_capacity );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        arch_status_t >::type
    Multipole_add_to_bal_capacity(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem, OrderArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< OrderArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::order_t order_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            order_t delta_bal_capacity;
            status = st::Types_perform_assignment< src_t, order_t >(
                delta_bal_capacity, arg );

            if( status == st::ARCH_STATUS_SUCCESS )
                elem->bal_capacity += delta_bal_capacity;
        }

        return status;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        arch_status_t >::type
    Multipole_subtract_from_bal_capacity(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem, OrderArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< OrderArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::order_t order_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            order_t delta_bal_capacity;
            status = st::Types_perform_assignment< src_t, order_t >(
                delta_bal_capacity, arg );

            if( status == st::ARCH_STATUS_SUCCESS )
                    elem->bal_capacity -= delta_bal_capacity;
        }

        return status;
    }

    template< class MultipoleT, typename OrderArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            OrderArg, typename MultipoleTraits< MultipoleT >::order_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_bal_capacity( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                        OrderArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< OrderArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::order_t order_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            order_t c;
            status = st::Types_perform_assignment< src_t, order_t >( c, arg );
            if( status == st::ARCH_STATUS_SUCCESS ) elem->bal_capacity *= c;
        }

        return status;
    }

    /* --------------------------------------------------------------------- */
    /* length */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_length( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* d_length */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_length( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* d_length */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_length( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* c */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_length( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_length( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg d_length )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->length += d_length;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_length( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg d_length )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->length -= d_length;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_scale_length( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg c )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->length *= c;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_length( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->length = -( elem->length );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_add_to_length( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                         RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t d_length;
            status = st::Types_perform_assignment< src_t, real_t >(
                d_length, arg );

            if( status == st::ARCH_STATUS_SUCCESS ) elem->length += d_length;
        }

        return status;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_subtract_from_length(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem, RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t d_length;
            status = st::Types_perform_assignment< src_t, real_t >(
                d_length, arg );

            if( status == st::ARCH_STATUS_SUCCESS ) elem->length -= d_length;
        }

        return status;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        ( SIXTRL_CXX_NAMESPACE::Multipole_impl_default< MultipoleT >() ||
          SIXTRL_CXX_NAMESPACE::Multipole_impl_std_vector< MultipoleT >() ) &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_length( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                        RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t c;
            status = st::Types_perform_assignment< src_t, real_t >( c, arg );
            if( status == st::ARCH_STATUS_SUCCESS ) elem->length *= c;
        }

        return status;
    }

    /* --------------------------------------------------------------------- */
    /* hxl */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* d_hxl */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* d_hxl */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* c */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg d_hxl )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hxl += d_hxl;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg d_hxl )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hxl -= d_hxl;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_scale_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg c )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hxl *= c;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hxl = -( elem->hxl );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
       !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_add_to_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                         RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t d_hxl;
            status = st::Types_perform_assignment< src_t, real_t >(
                d_hxl, arg );

            if( status == st::ARCH_STATUS_SUCCESS ) elem->hxl += d_hxl;
        }

        return status;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
       !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_subtract_from_hxl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem, RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t d_hxl;
            status = st::Types_perform_assignment< src_t, real_t >(
                d_hxl, arg );

            if( status == st::ARCH_STATUS_SUCCESS ) elem->hxl -= d_hxl;
        }

        return status;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
       !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_hxl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                        RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t c;
            status = st::Types_perform_assignment< src_t, real_t >( c, arg );
            if( status == st::ARCH_STATUS_SUCCESS ) elem->hxl *= c;
        }

        return status;
    }

    /* --------------------------------------------------------------------- */
    /* hyl */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* d_hyl */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* d_hyl */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealArg /* c */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg d_hyl )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hyl += d_hyl;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg d_hyl )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hyl -= d_hyl;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_scale_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealArg c )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hyl *= c;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem )
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        elem->hyl = -( elem->hyl );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
       !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_add_to_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                         RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t d_hyl;
            status = st::Types_perform_assignment< src_t, real_t >(
                d_hyl, arg );

            if( status == st::ARCH_STATUS_SUCCESS ) elem->hyl += d_hyl;
        }

        return status;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
       !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        arch_status_t >::type
    Multipole_subtract_from_hyl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem, RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t d_hyl;
            status = st::Types_perform_assignment< src_t, real_t >(
                d_hyl, arg );

            if( status == st::ARCH_STATUS_SUCCESS ) elem->hyl -= d_hyl;
        }

        return status;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
       !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            RealArg, typename MultipoleTraits< MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_hyl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
                        RealArg arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type src_t;
        typedef typename MultipoleTraits< MultipoleT >::real_t real_t;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        if( elem != SIXTRL_NULLPTR )
        {
            real_t c;
            status = st::Types_perform_assignment< src_t, real_t >( c, arg );
            if( status == st::ARCH_STATUS_SUCCESS ) elem->hyl *= c;
        }

        return status;
    }

    /* --------------------------------------------------------------------- */
    /* bal */

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_bal( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealIter /* d_bal */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_bal( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealIter /* d_bal */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_bal( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */, RealIter /* c */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
         SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_bal( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT /* elem */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_add_to_bal( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealIter delta_bal_values_begin )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        return st::Math_arithmetic_add_to(
            st::Multipole_bal_begin( elem ), st::Multipole_bal_end( elem ),
            delta_bal_values_begin );
    }

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_subtract_from_bal( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealIter delta_bal_values_begin )
    {
        return SIXTRL_CXX_NAMESPACE::Math_arithmetic_subtract_from(
            SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( elem ),
            SIXTRL_CXX_NAMESPACE::Multipole_bal_end( elem ),
            delta_bal_values_begin );
    }

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_scale_bal( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem, RealIter factor_values_begin )
    {
        return SIXTRL_CXX_NAMESPACE::Math_arithmetic_scale(
            SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( elem ),
            SIXTRL_CXX_NAMESPACE::Multipole_bal_end( elem ),
            factor_values_begin );
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_change_sign_bal( SIXTRL_BE_ARGPTR_DEC MultipoleT*
        SIXTRL_RESTRICT elem )
    {
        return SIXTRL_CXX_NAMESPACE::Math_arithmetic_change_sign(
            SIXTRL_CXX_NAMESPACE::Multipole_bal_begin( elem ),
            SIXTRL_CXX_NAMESPACE::Multipole_bal_end( elem ) );
    }

    /* --------------------------------------------------------------------- */
    /* knl */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
        >::type
    Multipole_knl(
        SIXTRL_BE_ARGPTR_DEC const MultipoleT *const SIXTRL_RESTRICT /*elem*/,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type /*idx*/ )
    {
        return typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::real_t{ 0 };
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT
                >::real_t >::type
    Multipole_knl(
        SIXTRL_BE_ARGPTR_DEC const MultipoleT *const SIXTRL_RESTRICT elem,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type idx )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;

        order_t const knl_idx = order_t{ 2 } * idx;
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( knl_idx < st::Multipole_bal_length( elem ) );

        return st::Multipole_bal( elem, knl_idx ) *
               st::Math_factorial< order_t, real_t >( idx );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_knl_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type /*idx*/,
        RealArg /*knl_value*/ )
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            typename std::decay< RealArg >::type,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT
                >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_knl_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type idx, RealArg knl_value )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;
        typedef typename std::decay< RealArg >::type in_real_t;

        return st::Multipole_set_bal_value( elem, order_t{ 2 } * idx,
            knl_value / st::Math_factorial< order_t, in_real_t >( idx ) );
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            typename std::decay< RealArg >::type,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT
                >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_knl_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type idx, RealArg in_knl_value )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename std::decay< RealArg >::type in_real_t;

        real_t knl_value;
        st::arch_status_t status = st::Types_perform_assignment<
            in_real_t, real_t >( knl_value, in_knl_value );

        if( status == st::ARCH_STATUS_SUCCESS )
        {
            knl_value /= st::Math_factorial< order_t, real_t >( idx );
            status = st::Multipole_set_bal_value(
                elem, order_t{ 2 } * idx, knl_value );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_all_knl_values(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/,
        RealArg /*knl_value*/ )
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_all_knl_values(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg knl_value )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;

        auto ptr = st::Multipole_bal_begin( elem );

        real_t temp_knl_value;

        if( ptr != SIXTRL_NULLPTR )
        {
            status = st::Types_perform_assignment< typename std::decay< RealArg
                >::type, real_t >( temp_knl_value, knl_value );
        }

        if( status == st::ARCH_STATUS_SUCCESS )
        {
            order_t const nn = st::Multipole_bal_length( elem );
            order_t ii = order_t{ 0 };
            order_t jj = ii;

            for( ; ii < nn ; ii += order_t{ 2 }, ++jj )
            {
                ptr[ ii ]  = temp_knl_value;
                ptr[ ii ] /= st::Math_factorial< order_t, real_t >( jj );
            }
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_knl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /* elem */,
        RealIter /*knl_it*/ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable<
            typename std::iterator_traits< RealIter >::value_type,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_knl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealIter knl_it )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;

        auto ptr = st::Multipole_bal_begin( elem );

        if( ptr != SIXTRL_NULLPTR )
        {
            status = st::ARCH_STATUS_SUCCESS;

            order_t const nn = st::Multipole_bal_length( elem );
            order_t ii = order_t{ 0 };
            order_t jj = ii;

            for( ; ii < nn ; ii += order_t{ 2 }, ++jj, ++knl_it )
            {
                ptr[ ii ]  = *knl_it;
                ptr[ ii ] /= st::Math_factorial< order_t, real_t >( jj );
            }
        }

        return status;
    }

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable<
            typename std::iterator_traits< RealIter >::value_type,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_knl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealIter knl_it )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;
        typedef typename std::iterator_traits<
            RealIter >::value_type src_real_t;

        auto ptr = st::Multipole_bal_begin( elem );

        if( ptr != SIXTRL_NULLPTR )
        {
            status = st::ARCH_STATUS_SUCCESS;

            order_t const nn = st::Multipole_bal_length( elem );
            order_t ii = order_t{ 0 };
            order_t jj = ii;

            while( ( status == st::ARCH_STATUS_SUCCESS ) && ( ii < nn ) )
            {
                status = st::Types_perform_assignment< src_real_t, real_t >(
                    ptr[ ii ], *knl_it++ );

                if( status == st::ARCH_STATUS_SUCCESS )
                {
                    ptr[ ii ] /= st::Math_factorial< order_t, real_t >( jj++ );
                }

                ii += order_t{ 2 };
            }
        }

        return status;
    }

    /* --------------------------------------------------------------------- */
    /* ksl */

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
        >::type
    Multipole_ksl(
        SIXTRL_BE_ARGPTR_DEC const MultipoleT *const SIXTRL_RESTRICT /*elem*/,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type /*idx*/ )
    {
        return typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::real_t{ 0 };
    }

    template< class MultipoleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
            MultipoleT >::real_t >::type
    Multipole_ksl(
        SIXTRL_BE_ARGPTR_DEC const MultipoleT *const SIXTRL_RESTRICT elem,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type idx )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;

        order_t const ksl_idx = order_t{ 2 } * idx + order_t{ 1 };
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( ksl_idx < st::Multipole_bal_length( elem ) );

        return st::Multipole_bal( elem, ksl_idx ) *
               st::Math_factorial< order_t, real_t >( idx );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_ksl_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type /*idx*/,
        RealArg /*ksl_value*/ )
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            typename std::decay< RealArg >::type,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT
                >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_ksl_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type idx, RealArg ksl_value )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;
        typedef typename std::decay< RealArg >::type in_real_t;

        return st::Multipole_set_bal_value( elem,
            order_t{ 2 } * idx + order_t{ 1 },
            ksl_value / st::Math_factorial< order_t, in_real_t >( idx ) );
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_allow_arithmetic<
            typename std::decay< RealArg >::type,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT
                >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_ksl_value(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
            SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
                >::const_argument_type idx, RealArg in_ksl_value )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;
        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename std::decay< RealArg >::type in_real_t;

        real_t ksl_value;
        st::arch_status_t status = st::Types_perform_assignment<
            in_real_t, real_t >( ksl_value, in_ksl_value );

        if( status == st::ARCH_STATUS_SUCCESS )
        {
            ksl_value /= st::Math_factorial< order_t, real_t >( idx );
            status = st::Multipole_set_bal_value( elem,
                        order_t{ 2 } * idx + order_t{ 1 }, ksl_value );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_all_ksl_values(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /*elem*/,
        RealArg /*ksl_value*/ )
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_all_ksl_values(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealArg ksl_value )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;

        auto ptr = st::Multipole_bal_begin( elem );

        real_t temp_ksl_value;

        if( ptr != SIXTRL_NULLPTR )
        {
            status = st::Types_perform_assignment< typename std::decay< RealArg
                >::type, real_t >( temp_ksl_value, ksl_value );
        }

        if( status == st::ARCH_STATUS_SUCCESS )
        {
            order_t const nn = st::Multipole_bal_length( elem );
            order_t ii = order_t{ 1 };
            order_t jj = order_t{ 0 };

            for( ; ii < nn ; ii += order_t{ 2 }, ++jj )
            {
                ptr[ ii ]  = temp_ksl_value;
                ptr[ ii ] /= st::Math_factorial< order_t, real_t >( jj );
            }
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_ksl(
        SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT /* elem */,
        RealIter /*ksl_it*/ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable<
            typename std::iterator_traits< RealIter >::value_type,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_ksl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealIter ksl_it )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;

        auto ptr = st::Multipole_bal_begin( elem );

        if( ptr != SIXTRL_NULLPTR )
        {
            status = st::ARCH_STATUS_SUCCESS;

            order_t const nn = st::Multipole_bal_length( elem );
            order_t ii = order_t{ 1 };
            order_t jj = order_t{ 0 };

            for( ; ii < nn ; ii += order_t{ 2 }, ++jj, ++ksl_it )
            {
                ptr[ ii ]  = *ksl_it;
                ptr[ ii ] /= st::Math_factorial< order_t, real_t >( jj );
            }
        }

        return status;
    }

    template< class MultipoleT, typename RealIter >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Multipole_is_type< MultipoleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable<
            typename std::iterator_traits< RealIter >::value_type,
            typename SIXTRL_CXX_NAMESPACE::MultipoleTraits<
                MultipoleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Multipole_set_ksl( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
        RealIter ksl_it )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;

        typedef typename st::MultipoleTraits< MultipoleT >::real_t  real_t;
        typedef typename st::MultipoleTraits< MultipoleT >::order_t order_t;
        typedef typename std::iterator_traits<
            RealIter >::value_type src_real_t;

        auto ptr = st::Multipole_bal_begin( elem );

        if( ptr != SIXTRL_NULLPTR )
        {
            status = st::ARCH_STATUS_SUCCESS;

            order_t const nn = st::Multipole_bal_length( elem );
            order_t ii = order_t{ 1 };
            order_t jj = order_t{ 0 };

            while( ( status == st::ARCH_STATUS_SUCCESS ) && ( ii < nn ) )
            {
                status = st::Types_perform_assignment< src_real_t, real_t >(
                    ptr[ ii ], *ksl_it++ );

                if( status == st::ARCH_STATUS_SUCCESS )
                {
                    ptr[ ii ] /= st::Math_factorial< order_t, real_t >( jj++ );
                }

                ii += order_t{ 2 };
            }
        }

        return status;
    }
}

/* ------------------------------------------------------------------------- */
/* order */

template< class MultipoleT, typename OrderArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_add_to_order)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, OrderArg delta_order )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_add_to_order( elem, delta_order );
}

template< class MultipoleT, typename OrderArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_subtract_from_order)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, OrderArg delta_order )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_subtract_from_order(
        elem, delta_order );
}

template< class MultipoleT, typename OrderArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_scale_order)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, OrderArg factor )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_scale_order( elem, factor );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_change_sign_order)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_change_sign_order( elem );
}

/* ------------------------------------------------------------------------- */
/* bal_capacity */

template< class MultipoleT, typename OrderArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_add_to_bal_capacity)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, OrderArg delta_bal_capacity )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_add_to_bal_capacity(
        elem, delta_bal_capacity );
}

template< class MultipoleT, typename OrderArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_subtract_from_bal_capacity)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, OrderArg delta_bal_capacity )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_subtract_from_bal_capacity(
        elem, delta_bal_capacity );
}

template< class MultipoleT, typename OrderArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_scale_bal_capacity)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, OrderArg factor )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_scale_bal_capacity( elem, factor );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_change_sign_bal_capacity)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_change_sign_bal_capacity( elem );
}

/* ------------------------------------------------------------------------- */
/* length */

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_add_to_length)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg delta_length )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_add_to_length(
        elem, delta_length );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_subtract_from_length)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg delta_length )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_subtract_from_length(
        elem, delta_length );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_scale_length)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg factor )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_scale_length( elem, factor );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_change_sign_length)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_change_sign_length( elem );
}

/* ------------------------------------------------------------------------- */
/* hxl */

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_add_to_hxl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg delta_hxl )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_add_to_hxl(
        elem, delta_hxl );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_subtract_from_hxl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg delta_hxl )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_subtract_from_hxl(
        elem, delta_hxl );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_scale_hxl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg factor )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_scale_hxl( elem, factor );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_change_sign_hxl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_change_sign_hxl( elem );
}

/* ------------------------------------------------------------------------- */
/* hyl */

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_add_to_hyl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg delta_hyl )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_add_to_hyl(
        elem, delta_hyl );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_subtract_from_hyl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg delta_hyl )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_subtract_from_hyl(
        elem, delta_hyl );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_scale_hyl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg factor )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_scale_hyl( elem, factor );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_change_sign_hyl)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_change_sign_hyl( elem );
}

/* ------------------------------------------------------------------------- */
/* bal */

template< class MultipoleT, typename RealIter >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_add_to_bal)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealIter delta_bal_values_begin )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_add_to_bal(
        elem, delta_bal_values_begin );
}

template< class MultipoleT, typename RealIter >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_subtract_from_bal)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealIter delta_bal_values_begin )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_subtract_from_bal(
        elem, delta_bal_values_begin );
}

template< class MultipoleT, typename RealIter >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_scale_bal)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealIter factor_values_begin )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_scale_bal(
        elem, factor_values_begin );
}

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_change_sign_bal)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_change_sign_bal( elem );
}

/* ------------------------------------------------------------------------- */
/* knl */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
NS(Multipole_knl)(
    SIXTRL_BE_ARGPTR_DEC const MultipoleT *const SIXTRL_RESTRICT elem,
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
            >::const_argument_type idx )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_knl( elem, idx );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_knl_value)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
            >::const_argument_type idx, RealArg knl_value )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_knl_value(
        elem, idx, knl_value );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_all_knl_values)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg knl_value )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_all_knl_values(
        elem, knl_value );
}

template< class MultipoleT, typename RealIter >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_knl)(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    RealIter knl_values_begin )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_knl( elem, knl_values_begin );
}

/* ------------------------------------------------------------------------- */
/* ksl */

template< class MultipoleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::real_t
NS(Multipole_ksl)(
    SIXTRL_BE_ARGPTR_DEC const MultipoleT *const SIXTRL_RESTRICT elem,
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
            >::const_argument_type idx )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_ksl( elem, idx );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
Multipole_set_ksl_value(
    SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::MultipoleTraits< MultipoleT >::order_t
            >::const_argument_type idx, RealArg ksl_value )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_ksl_value(
        elem, idx, ksl_value );
}

template< class MultipoleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_all_ksl_values)( SIXTRL_BE_ARGPTR_DEC MultipoleT*
    SIXTRL_RESTRICT elem, RealArg ksl_value )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_all_ksl_values(
        elem, ksl_value );
}

template< class MultipoleT, typename RealIter >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Multipole_set_ksl)( SIXTRL_BE_ARGPTR_DEC MultipoleT* SIXTRL_RESTRICT elem,
    RealIter ksl_values_begin )
{
    return SIXTRL_CXX_NAMESPACE::Multipole_set_ksl( elem, ksl_values_begin );
}

#endif /* C++ */

#if defined( __cplusplus ) && !defined( _GPUCODE )
extern "C" {
#endif /* C++, Host */

/* ------------------------------------------------------------------------- */
/* order */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_add_to_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const delta_order ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_subtract_from_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const delta_order ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_scale_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const factor ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_change_sign_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* bal_capacity */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_add_to_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const delta_bal_capacity ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t)
NS(Multipole_subtract_from_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const delta_bal_capacity ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_scale_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const factor ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t)
NS(Multipole_change_sign_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* length */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_add_to_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_length ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_subtract_from_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_length ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_scale_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const factor ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_change_sign_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* hxl */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_add_to_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_hxl ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_subtract_from_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_hxl ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_scale_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const factor ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_change_sign_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* hyl */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_add_to_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_hyl ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_subtract_from_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_hyl ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_scale_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const factor ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_change_sign_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* bal */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_add_to_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* delta_bal_begin
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_subtract_from_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* delta_bal_begin
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_scale_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* factor_begin ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_change_sign_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* knl */

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_knl)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem,
    NS(be_size_t) const idx ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_knl_value)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_size_t) const idx, NS(be_real_t) const knl_value ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_all_knl_values)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const knl_value ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_knl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* knl_begin ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* ksl */

SIXTRL_STATIC SIXTRL_FN NS(be_real_t) NS(Multipole_ksl)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem,
    NS(be_size_t) const idx ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_ksl_value)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_size_t) const idx, NS(be_real_t) const ksl_value ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_all_ksl_values)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const ksl_value ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Multipole_set_ksl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* ksl_begin ) SIXTRL_NOEXCEPT;

#if defined( __cplusplus ) && !defined( _GPUCODE )
}
#endif /* C++, Host */

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/* !!!!!!!        Inline Methods and Functions Implementations       !!!!!!!! */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

#if defined( __cplusplus ) && !defined( _GPUCODE )
extern "C" {
#endif /* C++, Host */

/* ------------------------------------------------------------------------- */
/* order */

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_add_to_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const delta_order ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->order += delta_order;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_subtract_from_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const delta_order ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->order -= delta_order;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_scale_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const factor ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->order *= factor;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_change_sign_order)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->order = -( elem->order );
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

/* ------------------------------------------------------------------------- */
/* bal_capacity */

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_add_to_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const delta_bal_capacity ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->bal_capacity += delta_bal_capacity;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_subtract_from_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const delta_bal_capacity ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->bal_capacity -= delta_bal_capacity;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_scale_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_order_t) const factor ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->bal_capacity *= factor;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_change_sign_bal_capacity)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->bal_capacity = -( elem->bal_capacity );
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

/* ------------------------------------------------------------------------- */
/* length */

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_add_to_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_length ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->length += delta_length;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_subtract_from_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_length ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->length -= delta_length;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_scale_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const factor ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->length *= factor;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_change_sign_length)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->length = -( elem->length );
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

/* ------------------------------------------------------------------------- */
/* hxl */

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_add_to_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_hxl ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->hxl += delta_hxl;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_subtract_from_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_hxl ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->hxl -= delta_hxl;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_scale_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const factor ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->hxl *= factor;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_change_sign_hxl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->hxl = -( elem->hxl );
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

/* ------------------------------------------------------------------------- */
/* hyl */

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_add_to_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_hyl ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->hyl += delta_hyl;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_subtract_from_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const delta_hyl ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->hyl -= delta_hyl;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_scale_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const factor ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->hyl *= factor;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_change_sign_hyl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
    elem->hyl = -( elem->hyl );
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

/* ------------------------------------------------------------------------- */
/* bal */

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_add_to_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* delta_bal_begin ) SIXTRL_NOEXCEPT
{
    return NS(Math_arithmetic_add_to_real_ranges)(
        NS(Multipole_bal_begin)( elem ), NS(Multipole_bal_end)( elem ),
        delta_bal_begin );
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_subtract_from_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* delta_bal_begin ) SIXTRL_NOEXCEPT
{
    return NS(Math_arithmetic_subtract_from_real_ranges)(
        NS(Multipole_bal_begin)( elem ), NS(Multipole_bal_end)( elem ),
        delta_bal_begin );
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_scale_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* factor_begin ) SIXTRL_NOEXCEPT
{
    return NS(Math_arithmetic_scale_real_ranges)(
        NS(Multipole_bal_begin)( elem ), NS(Multipole_bal_end)( elem ),
        factor_begin );
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_change_sign_bal)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return NS(Math_arithmetic_change_sign_for_real_ranges)(
        NS(Multipole_bal_begin)( elem ), NS(Multipole_bal_end)( elem ) );
}

/* ------------------------------------------------------------------------- */
/* knl */

SIXTRL_INLINE NS(be_real_t) NS(Multipole_knl)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem,
    NS(be_size_t) const idx ) SIXTRL_NOEXCEPT
{
    return NS(Multipole_bal)( elem, ( NS(be_size_t) )2 * idx ) *
           NS(Math_factorial)( idx );
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_knl_value)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_size_t) const idx, NS(be_real_t) const knl_value ) SIXTRL_NOEXCEPT
{
    NS(be_size_t) const knl_idx = ( NS(be_size_t) )2 * idx;
    return NS(Multipole_set_bal_value)( elem, knl_idx,
        knl_value / NS(Math_factorial)( idx ) );
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_all_knl_values)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const knl_value ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    NS(be_size_t) const nn = NS(Multipole_bal_length)( elem );
    NS(be_size_t) ii = ( NS(be_size_t) )0;

    for(  ; ii < nn ; ii += 2u )
    {
        NS(be_size_t) const knl_idx = ii >> 1u;
        NS(be_real_t) const bal_value = knl_value /
            NS(Math_factorial)( knl_idx );

        status = NS(Multipole_set_bal_value)( elem, ii, bal_value );
        if( status != ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS ) break;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_knl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* knl_it ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    NS(be_size_t) const nn = NS(Multipole_bal_length)( elem );
    NS(be_size_t) ii = ( NS(be_size_t) )0;

    if( knl_it != SIXTRL_NULLPTR )
    {
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;

        for( ; ii < nn ; ii += 2u )
        {
            NS(be_size_t) const knl_idx = ii >> 1u;
            NS(be_real_t) const bal_value =
                ( *knl_it++ ) / NS(Math_factorial)( knl_idx );

            status = NS(Multipole_set_bal_value)( elem, ii, bal_value );
            if( status != ( NS(arch_status_t)
                    )SIXTRL_ARCH_STATUS_SUCCESS ) break;
        }
    }

    return status;
}

/* ------------------------------------------------------------------------- */
/* ksl */

SIXTRL_INLINE NS(be_real_t) NS(Multipole_ksl)(
    SIXTRL_BE_ARGPTR_DEC const NS(Multipole) *const SIXTRL_RESTRICT elem,
    NS(be_size_t) const idx ) SIXTRL_NOEXCEPT
{
    return NS(Multipole_bal)( elem, ( NS(be_size_t) )2 * idx ) *
           NS(Math_factorial)( idx );
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_ksl_value)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_size_t) const idx, NS(be_real_t) const ksl_value ) SIXTRL_NOEXCEPT
{
    NS(be_size_t) const ksl_idx = ( NS(be_size_t) )2 * idx;
    return NS(Multipole_set_bal_value)( elem, ksl_idx,
        ksl_value / NS(Math_factorial)( idx ) );
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_all_ksl_values)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    NS(be_real_t) const ksl_value ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    NS(be_size_t) const nn = NS(Multipole_bal_length)( elem );
    NS(be_size_t) ii = ( NS(be_size_t) )1;

    for(  ; ii < nn ; ii += 2u )
    {
        NS(be_size_t) const ksl_idx = ii >> 1u;
        NS(be_real_t) const bal_value = ksl_value /
            NS(Math_factorial)( ksl_idx );

        status = NS(Multipole_set_bal_value)( elem, ii, bal_value );
        if( status != ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS ) break;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Multipole_set_ksl)(
    SIXTRL_BE_ARGPTR_DEC NS(Multipole)* SIXTRL_RESTRICT elem,
    SIXTRL_BE_DATAPTR_DEC NS(be_real_t) const* ksl_it ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    NS(be_size_t) const nn = NS(Multipole_bal_length)( elem );
    NS(be_size_t) ii = ( NS(be_size_t) )1;

    if( ksl_it != SIXTRL_NULLPTR )
    {
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;

        for( ; ii < nn ; ii += 2u )
        {
            NS(be_size_t) const ksl_idx = ii >> 1u;
            NS(be_real_t) const bal_value =
                ( *ksl_it++ ) / NS(Math_factorial)( ksl_idx );

            status = NS(Multipole_set_bal_value)( elem, ii, bal_value );
            if( status != ( NS(arch_status_t)
                    )SIXTRL_ARCH_STATUS_SUCCESS ) break;
        }
    }

    return status;
}

#if defined( __cplusplus ) && !defined( _GPUCODE )
}
#endif /* C++, Host */
#endif /* SIXTRACKLIB_COMMON_BEAM_ELEMENTS_MULTIPOLE_MULTIPOLE_DERIVED_API_H__ */
