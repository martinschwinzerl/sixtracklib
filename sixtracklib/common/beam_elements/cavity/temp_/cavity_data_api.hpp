#ifndef SIXTRACKLIB_COMMON_BEAM_ELEMENTS_CAVITY_CAVITY_DATA_API_CXX_HPP__
#define SIXTRACKLIB_COMMON_BEAM_ELEMENTS_CAVITY_CAVITY_DATA_API_CXX_HPP__

#if !defined( SIXTRL_NO_INCLUDES )
    #include "sixtracklib/common/beam_elements/cavity/cavity_data.hpp"
    #include "sixtracklib/common/internal/type_store_traits.hpp"
#endif /* !defined( SIXTRL_NO_INCLUDES ) */

#if defined( __cplusplus )
namespace SIXTRL_CXX_NAMESPACE
{
    /* ********************************************************************* */
    /** SixTrackLib: Add autogenerated C++ API */
    /* ********************************************************************* */

    /* init API: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >*
    Cavity_preset( SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN void Cavity_init( SIXTRL_BE_ARGPTR_DEC CavityData<
        R, RAlign >* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign, typename VoltageArg,
              typename FrequArg, typename LagArg >
    SIXTRL_STATIC SIXTRL_FN void Cavity_init_detailed(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        VoltageArg voltage, FrequArg frequency, LagArg lag );

    template< class R, arch_size_t RAlign, typename VoltageArg,
              typename FrequArg, typename LagArg >
    SIXTRL_STATIC SIXTRL_FN void Cavity_init(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        VoltageArg voltage, FrequArg frequency, LagArg lag );

    /* getter API, ptr argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_voltage( SIXTRL_BE_ARGPTR_DEC const CavityData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_frequency( SIXTRL_BE_ARGPTR_DEC const CavityData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_lag( SIXTRL_BE_ARGPTR_DEC const CavityData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    /* setter API, ptr argument: */

    template< class R, arch_size_t RAlign, typename VoltageArg >
    SIXTRL_STATIC SIXTRL_FN void Cavity_set_voltage(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        VoltageArg voltage );

    template< class R, arch_size_t RAlign, typename FrequArg >
    SIXTRL_STATIC SIXTRL_FN void Cavity_set_frequency(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        FrequArg frequency );

    template< class R, arch_size_t RAlign, typename LagArg >
    SIXTRL_STATIC SIXTRL_FN void Cavity_set_lag(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        LagArg lag );

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    /* getter API, ref argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_voltage( SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_frequency( SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_lag( SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT;

    /* setter API, ref argument: */

    template< class R, arch_size_t RAlign, typename VoltageArg >
    SIXTRL_STATIC SIXTRL_FN void Cavity_set_voltage( SIXTRL_BE_ARGPTR_DEC
        CavityData< R, RAlign >& SIXTRL_RESTRICT_REF elem, VoltageArg voltage );

    template< class R, arch_size_t RAlign, typename FrequArg >
    SIXTRL_STATIC SIXTRL_FN void Cavity_set_frequency( SIXTRL_BE_ARGPTR_DEC
        CavityData< R, RAlign >& SIXTRL_RESTRICT_REF elem, FrequArg frequency );

    template< class R, arch_size_t RAlign, typename LagArg >
    SIXTRL_STATIC SIXTRL_FN void Cavity_set_lag( SIXTRL_BE_ARGPTR_DEC
        CavityData< R, RAlign >& SIXTRL_RESTRICT_REF elem, LagArg lag );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN
SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
NS(Cavity_preset)( SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData<
    R, RAlign >* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN void NS(Cavity_init)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename VoltageArg, typename FrequArg, typename LagArg >
SIXTRL_STATIC SIXTRL_FN void NS(Cavity_init_detailed)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem,
    VoltageArg voltage, FrequArg frequency, LagArg lag );

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename VoltageArg, typename FrequArg, typename LagArg >
SIXTRL_STATIC SIXTRL_FN void NS(Cavity_init)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem,
    VoltageArg voltage, FrequArg frequency, LagArg lag );

/* getter API, ptr argument: */

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::CavityTraits<
        SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > >::real_t
            >::const_existing_type
NS(Cavity_voltage)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > *const SIXTRL_RESTRICT
        elem ) SIXTRL_NOEXCEPT;

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::CavityTraits<
        SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > >::real_t
            >::const_existing_type
NS(Cavity_frequency)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > *const SIXTRL_RESTRICT
        elem ) SIXTRL_NOEXCEPT;

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::CavityTraits<
        SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > >::real_t
            >::const_existing_type
NS(Cavity_lag)( SIXTRL_BE_ARGPTR_DEC const SIXTRL_CXX_NAMESPACE::CavityData<
    R, RAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

/* setter API, ptr argument: */

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename VoltageArg >
SIXTRL_STATIC SIXTRL_FN void NS(Cavity_set_voltage)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem, VoltageArg voltage );

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename FrequArg >
SIXTRL_STATIC SIXTRL_FN void NS(Cavity_set_frequency)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem, FrequArg frequency );

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename LagArg >
SIXTRL_STATIC SIXTRL_FN void NS(Cavity_set_lag)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem, LagArg lag );

#endif /* C++ */

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/* !!!!!!!        Inline Methods and Functions Implementations       !!!!!!!! */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

#if defined( __cplusplus )
namespace SIXTRL_CXX_NAMESPACE
{
    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >*
    Cavity_preset( SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        typedef typename CavityTraits< CavityData< R, RAlign > >::real_t
                real_t;

        if( elem != SIXTRL_NULLPTR )
        {
            SIXTRL_CXX_NAMESPACE::Cavity_set_voltage( elem, real_t{ 0 } );
            SIXTRL_CXX_NAMESPACE::Cavity_set_frequency( elem, real_t{ 0 } );
            SIXTRL_CXX_NAMESPACE::Cavity_set_lag( elem, real_t{ 0 } );
        }

        return elem;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE void Cavity_init( SIXTRL_BE_ARGPTR_DEC CavityData<
        R, RAlign >* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_CXX_NAMESPACE::Cavity_preset( elem );
    }

    template< class R, arch_size_t RAlign, typename VoltageArg,
              typename FrequArg, typename LagArg >
    SIXTRL_INLINE void Cavity_init_detailed(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        VoltageArg voltage, FrequArg frequency, LagArg lag )
    {
        SIXTRL_CXX_NAMESPACE::Cavity_set_voltage( elem, voltage );
        SIXTRL_CXX_NAMESPACE::Cavity_set_frequency( elem, frequency );
        SIXTRL_CXX_NAMESPACE::Cavity_set_lag( elem, lag );
    }

    template< class R, arch_size_t RAlign, typename VoltageArg,
              typename FrequArg, typename LagArg >
    SIXTRL_INLINE void Cavity_init(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        VoltageArg voltage, FrequArg frequency, LagArg lag )
    {
        SIXTRL_CXX_NAMESPACE::Cavity_init_detailed(
            elem, voltage, frequency, lag );
    }

    /* getter API, ptr argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_voltage( SIXTRL_BE_ARGPTR_DEC const CavityData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->voltage;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_frequency( SIXTRL_BE_ARGPTR_DEC const CavityData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->frequency;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_lag( SIXTRL_BE_ARGPTR_DEC const CavityData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->lag;
    }

    /* setter API, ptr argument: */

    template< class R, arch_size_t RAlign, typename VoltageArg >
    SIXTRL_INLINE void Cavity_set_voltage(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        VoltageArg voltage )
    {
        typedef typename std::decay< VoltageArg >::type src_t;
        typedef typename CavityTraits< CavityData< R, RAlign > >::real_t
                dest_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment< src_t, dest_t >(
            elem->voltage, voltage );
    }

    template< class R, arch_size_t RAlign, typename FrequArg >
    SIXTRL_INLINE void Cavity_frequency(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        FrequArg frequency ) SIXTRL_NOEXCEPT
    {
        typedef typename std::decay< FrequArg >::type src_t;
        typedef typename CavityTraits< CavityData< R, RAlign > >::real_t
                dest_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment< src_t, dest_t >(
            elem->frequency, frequency );
    }

    template< class R, arch_size_t RAlign, typename LagArg >
    SIXTRL_INLINE void Cavity_lag(
        SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign >* SIXTRL_RESTRICT elem,
        LagArg lag ) SIXTRL_NOEXCEPT
    {
        typedef typename std::decay< LagArg >::type src_t;
        typedef typename CavityTraits< CavityData< R, RAlign > >::real_t
                dest_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment< src_t, dest_t >(
            elem->lag, lag );
    }

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    /* getter API, ref argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_voltage( SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT
    {
        return elem.voltage;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_frequency( SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT
    {
        return elem.frequency;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        CavityTraits< CavityData< R, RAlign > >::real_t >::const_existing_type
    Cavity_lag( SIXTRL_BE_ARGPTR_DEC CavityData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT
    {
        return elem.lag;
    }

    /* setter API, ref argument: */

    template< class R, arch_size_t RAlign, typename VoltageArg >
    SIXTRL_INLINE void Cavity_voltage( SIXTRL_BE_ARGPTR_DEC
        CavityData< R, RAlign >& SIXTRL_RESTRICT_REF elem, VoltageArg voltage )
    {
        SIXTRL_CXX_NAMESPACE::Cavity_set_voltage( &elem, voltage );
    }

    template< class R, arch_size_t RAlign, typename FrequArg >
    SIXTRL_INLINE void Cavity_frequency( SIXTRL_BE_ARGPTR_DEC
        CavityData< R, RAlign >& SIXTRL_RESTRICT_REF elem, FrequArg frequency )
    {
        SIXTRL_CXX_NAMESPACE::Cavity_set_frequency( &elem, frequency );
    }

    template< class R, arch_size_t RAlign, typename LagArg >
    SIXTRL_INLINE void Cavity_lag( SIXTRL_BE_ARGPTR_DEC
        CavityData< R, RAlign >& SIXTRL_RESTRICT_REF elem, LagArg lag )
    {
        SIXTRL_CXX_NAMESPACE::Cavity_set_lag( &elem, lag );
    }
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN
SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
NS(Cavity_preset)( SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData<
    R, RAlign >* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Cavity_preset( elem );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_INLINE void NS(Cavity_init)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Cavity_init( elem );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename VoltageArg, typename FrequArg, typename LagArg >
SIXTRL_INLINE void NS(Cavity_init_detailed)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
    SIXTRL_RESTRICT elem, VoltageArg voltage, FrequArg frequency, LagArg lag )
{
    return SIXTRL_CXX_NAMESPACE::Cavity_init_detailed(
        elem, voltage, frequency, lag );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename VoltageArg, typename FrequArg, typename LagArg >
SIXTRL_INLINE void NS(Cavity_init)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem,
    VoltageArg voltage, FrequArg frequency, LagArg lag )
{
    return SIXTRL_CXX_NAMESPACE::Cavity_init_detailed(
        elem, voltage, frequency, lag );
}

/* getter API, ptr argument: */

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::CavityTraits<
        SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > >::real_t
            >::const_existing_type
NS(Cavity_voltage)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > *const SIXTRL_RESTRICT
        elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Cavity_voltage( elem );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::CavityTraits<
        SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > >::real_t
            >::const_existing_type
NS(Cavity_frequency)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > *const SIXTRL_RESTRICT
        elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Cavity_frequency( elem );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::CavityTraits<
        SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign > >::real_t
            >::const_existing_type
NS(Cavity_lag)( SIXTRL_BE_ARGPTR_DEC const SIXTRL_CXX_NAMESPACE::CavityData<
    R, RAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Cavity_lag( elem );
}

/* setter API, ptr argument: */

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename VoltageArg >
SIXTRL_INLINE void NS(Cavity_set_voltage)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem, VoltageArg voltage )
{
    return SIXTRL_CXX_NAMESPACE::Cavity_set_voltage( elem, voltage );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename FrequArg >
SIXTRL_INLINE void NS(Cavity_set_frequency)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem, FrequArg frequency )
{
    return SIXTRL_CXX_NAMESPACE::Cavity_set_frequency( elem, frequency );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign,
          typename LagArg >
SIXTRL_INLINE void NS(Cavity_set_lag)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::CavityData< R, RAlign >*
        SIXTRL_RESTRICT elem, LagArg lag )
{
    return SIXTRL_CXX_NAMESPACE::Cavity_set_lag( elem, lag );
}

#endif /* !defined( __cplusplus ) */
#endif /* SIXTRACKLIB_COMMON_BEAM_ELEMENTS_CAVITY_CAVITY_DATA_API_CXX_HPP__ */
