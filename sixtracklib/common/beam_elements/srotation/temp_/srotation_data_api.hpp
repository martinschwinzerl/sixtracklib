#ifndef SIXTRACKLIB_COMMON_BEAM_ELEMENTS_SROTATION_SROTATION_DATA_API_CXX_HPP__
#define SIXTRACKLIB_COMMON_BEAM_ELEMENTS_SROTATION_SROTATION_DATA_API_CXX_HPP__

#if !defined( SIXTRL_NO_INCLUDES )
    #include "sixtracklib/common/beam_elements/srotation/srotation_data.hpp"
    #include "sixtracklib/common/internal/math_constants.h"
    #include "sixtracklib/common/internal/math_functions.h"
    #include "sixtracklib/common/internal/type_store_traits.hpp"
#endif /* !defined( SIXTRL_NO_INCLUDES ) */

#if defined( __cplusplus )
namespace SIXTRL_CXX_NAMESPACE
{
    /* ********************************************************************* */
    /** SixTrackLib: Add autogenerated C++ API */
    /* ********************************************************************* */

    /* init API: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >*
    SRotation_preset( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN void SRotation_init( SIXTRL_BE_ARGPTR_DEC SRotationData<
        R, RAlign >* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_init_angle(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        AngleArg angle_deg );

    template< class R, arch_size_t RAlign, typename CosArg, typename SinArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_init_detailed(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        CosArg cos_z, SinArg sin_z );

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_init(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        AngleArg angle_deg );

    template< class R, arch_size_t RAlign, typename CosArg, typename SinArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_init(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        CosArg cos_z, SinArg sin_z );

    /* getter API, ptr argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::const_existing_type
    SRotation_cos_z( SIXTRL_BE_ARGPTR_DEC const SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::const_existing_type
    SRotation_sin_z( SIXTRL_BE_ARGPTR_DEC const SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::value_type
    SRotation_angle( SIXTRL_BE_ARGPTR_DEC const SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem );

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::value_type
    SRotation_angle_rad( SIXTRL_BE_ARGPTR_DEC const SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem );

    /* setter API, ptr argument: */

    template< class R, arch_size_t RAlign, typename CosArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_set_cos_z(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        CosArg cos_z );

    template< class R, arch_size_t RAlign, typename SinArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_set_sin_z(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        SinArg sin_z );

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_set_angle(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        AngleArg angle_deg );

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_set_angle_rad(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        AngleArg angle_rad );

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    /* getter API, ref argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::const_existing_type
    SRotation_cos_z( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::const_existing_type
    SRotation_sin_z( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::value_type
    SRotation_angle( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem );

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::value_type
    SRotation_angle_rad( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem );

    /* setter API, ref argument: */

    template< class R, arch_size_t RAlign, typename CosArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_set_cos_z(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >& SIXTRL_RESTRICT_REF elem,
        CosArg cos_z );

    template< class R, arch_size_t RAlign, typename SinArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_set_sin_z(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >& SIXTRL_RESTRICT_REF elem,
        SinArg sin_z );

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_set_angle(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >& SIXTRL_RESTRICT_REF elem,
        AngleArg angle_deg );

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_STATIC SIXTRL_FN void SRotation_set_angle_rad(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >& SIXTRL_RESTRICT_REF elem,
        AngleArg angle_rad );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::SRotationTraits<
        SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > >::real_t
            >::const_existing_type
NS(SRotation_cos_z)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::SRotationTraits<
        SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > >::real_t
            >::const_existing_type
NS(SRotation_sin_z)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::SRotationTraits<
        SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > >::real_t >::value_type
NS(SRotation_angle)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem );

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_STATIC SIXTRL_FN typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::SRotationTraits<
        SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > >::real_t >::value_type
NS(SRotation_angle_rad)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem );

/* setter API, ptr argument: */

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign, typename CosArg >
SIXTRL_STATIC SIXTRL_FN void NS(SRotation_set_cos_z)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem, CosArg cos_z );

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign, typename SinArg >
SIXTRL_STATIC SIXTRL_FN void NS(SRotation_set_sin_z)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem, SinArg sin_z );

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign, typename AngleArg >
SIXTRL_STATIC SIXTRL_FN void NS(SRotation_set_angle)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem, AngleArg angle_deg );

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign, typename AngleArg >
SIXTRL_STATIC SIXTRL_FN void NS(SRotation_set_angle_rad)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem, AngleArg angle_rad );

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/* !!!!!!!        Inline Methods and Functions Implementations       !!!!!!!! */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

namespace SIXTRL_CXX_NAMESPACE
{
    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >*
    SRotation_preset( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        if( elem != SIXTRL_NULLPTR )
        {
            typedef typename SRotationTraits<
                SRotationData< R, RAlign > >::real_t real_t;

            SIXTRL_CXX_NAMESPACE::SRotation_set_cos_z( elem, real_t{ 1 } );
            SIXTRL_CXX_NAMESPACE::SRotation_set_sin_z( elem, real_t{ 0 } );
        }

        return elem;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE void SRotation_init( SIXTRL_BE_ARGPTR_DEC SRotationData<
        R, RAlign >* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_CXX_NAMESPACE::SRotation_preset( elem );
    }

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_INLINE void SRotation_init_angle(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        AngleArg angle_deg )
    {
        typedef typename SRotationTraits<
            SRotationData< R, RAlign > >::real_t real_t;

        real_t const angle_rad{ angle_deg *
            SIXTRL_CXX_NAMESPACE::MathConstants_deg2rad< real_t >() };

        real_t const cos_z{ SIXTRL_CXX_NAMESPACE::cos< real_t >( angle_rad ) };
        real_t const sin_z{ SIXTRL_CXX_NAMESPACE::sin< real_t >( angle_rad ) };

        SIXTRL_CXX_NAMESPACE::SRotation_set_cos_z( elem, cos_z );
        SIXTRL_CXX_NAMESPACE::SRotation_set_cos_z( elem, sin_z );
    }

    template< class R, arch_size_t RAlign, typename CosArg, typename SinArg >
    SIXTRL_INLINE void SRotation_init_detailed(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        CosArg cos_z, SinArg sin_z )
    {
        SIXTRL_CXX_NAMESPACE::SRotation_set_cos_z( elem, cos_z );
        SIXTRL_CXX_NAMESPACE::SRotation_set_sin_z( elem, sin_z );
    }

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_INLINE void SRotation_init(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        AngleArg angle_deg )
    {
        SIXTRL_CXX_NAMESPACE::SRotation_init_angle( elem, angle_deg );
    }

    template< class R, arch_size_t RAlign, typename CosArg, typename SinArg >
    SIXTRL_INLINE void SRotation_init(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        CosArg cos_z, SinArg sin_z )
    {
        SIXTRL_CXX_NAMESPACE::SRotation_init_detailed( elem, cos_z, sin_z );
    }

    /* getter API, ptr argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename SRotationTraits<
        SRotationData< R, RAlign > >::real_t >::const_existing_type
    SRotation_cos_z( SIXTRL_BE_ARGPTR_DEC const SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->cos_z;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename SRotationTraits<
        SRotationData< R, RAlign > >::real_t >::const_existing_type
    SRotation_sin_z( SIXTRL_BE_ARGPTR_DEC const SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->sin_z;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename SRotationTraits<
        SRotationData< R, RAlign > >::real_t >::value_type
    SRotation_angle( SIXTRL_BE_ARGPTR_DEC const SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem )
    {
        typedef typename SRotationTraits<
            SRotationData< R, RAlign > >::real_t real_t;

        return SIXTRL_CXX_NAMESPACE::MathConstants_rad2deg< real_t >() *
               SIXTRL_CXX_NAMESPACE::SRotation_angle_rad( elem );
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::value_type
    SRotation_angle_rad( SIXTRL_BE_ARGPTR_DEC const SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem )
    {
        return SIXTRL_CXX_NAMESPACE::atan2(
            SIXTRL_CXX_NAMESPACE::SRotation_cos_z( elem ),
            SIXTRL_CXX_NAMESPACE::SRotation_sin_z( elem ) );
    }

    /* setter API, ptr argument: */

    template< class R, arch_size_t RAlign, typename CosArg >
    SIXTRL_INLINE void SRotation_set_cos_z( SIXTRL_BE_ARGPTR_DEC SRotationData<
        R, RAlign >* SIXTRL_RESTRICT elem, CosArg cos_z )
    {
        typedef typename std::decay< CosArg >::type src_t;
        typedef typename SRotationTraits<
            SRotationData< R, RAlign > >::real_t dest_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment< src_t, dest_t >(
            elem->cos_z, cos_z );
    }

    template< class R, arch_size_t RAlign, typename SinArg >
    SIXTRL_INLINE void SRotation_set_sin_z( SIXTRL_BE_ARGPTR_DEC SRotationData<
        R, RAlign >* SIXTRL_RESTRICT elem, SinArg sin_z )
    {
        typedef typename std::decay< SinArg >::type src_t;
        typedef typename SRotationTraits<
            SRotationData< R, RAlign > >::real_t dest_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment< src_t, dest_t >(
            elem->sin_z, sin_z );
    }

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_INLINE void SRotation_set_angle(
        SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign >* SIXTRL_RESTRICT elem,
        AngleArg angle_deg )
    {
        typedef typename SRotationTraits<
            SRotationData< R, RAlign > >::real_t real_t;

        real_t const angle_rad{ angle_deg *
                SIXTRL_CXX_NAMESPACE::MathConstants_deg2rad< real_t >() };

        SIXTRL_CXX_NAMESPACE::SRotation_set_angle_rad( elem, angle_rad );
    }

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_INLINE void SRotation_set_angle_rad( SIXTRL_BE_ARGPTR_DEC
        SRotationData< R, RAlign >* SIXTRL_RESTRICT elem, AngleArg angle_rad )
    {
        SIXTRL_CXX_NAMESPACE::SRotation_set_cos_z( elem,
            SIXTRL_CXX_NAMESPACE::cos( angle_rad ) );

        SIXTRL_CXX_NAMESPACE::SRotation_set_sin_z( elem,
            SIXTRL_CXX_NAMESPACE::sin( angle_rad ) );
    }

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    /* getter API, ref argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename SRotationTraits<
        SRotationData< R, RAlign > >::real_t >::const_existing_type
    SRotation_cos_z( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT
    {
        return elem.cos_z;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::const_existing_type
    SRotation_sin_z( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT
    {
        return elem.sin_z;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::value_type
    SRotation_angle( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem )
    {
        typedef typename TypeMethodParamTraits< typename
            SRotationTraits< SRotationData< R, RAlign > >::real_t real_t;

        return SIXTRL_CXX_NAMESPACE::SRotation_angle( &elem );
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        SRotationTraits< SRotationData< R, RAlign > >::real_t >::value_type
    SRotation_angle_rad( SIXTRL_BE_ARGPTR_DEC SRotationData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem )
    {
        return SIXTRL_CXX_NAMESPACE::SRotation_angle_rad( &elem );
    }

    /* setter API, ref argument: */

    template< class R, arch_size_t RAlign, typename CosArg >
    SIXTRL_INLINE void SRotation_set_cos_z( SIXTRL_BE_ARGPTR_DEC SRotationData<
        R, RAlign >& SIXTRL_RESTRICT_REF elem, CosArg cos_z )
    {
        SIXTRL_CXX_NAMESPACE::SRotation_set_cos_z( &elem, cos_z );
    }

    template< class R, arch_size_t RAlign, typename SinArg >
    SIXTRL_INLINE void SRotation_set_sin_z( SIXTRL_BE_ARGPTR_DEC SRotationData<
        R, RAlign >& SIXTRL_RESTRICT_REF elem, SinArg sin_z )
    {
        SIXTRL_CXX_NAMESPACE::SRotation_set_sin_z( &elem, sin_z );
    }

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_INLINE void SRotation_set_angle( SIXTRL_BE_ARGPTR_DEC SRotationData<
        R, RAlign >& SIXTRL_RESTRICT_REF elem, AngleArg angle_deg )
    {
        SIXTRL_CXX_NAMESPACE::SRotation_set_angle( &elem, angle_deg );
    }

    template< class R, arch_size_t RAlign, typename AngleArg >
    SIXTRL_INLINE void SRotation_set_angle_rad( SIXTRL_BE_ARGPTR_DEC
        SRotationData< R, RAlign >& SIXTRL_RESTRICT_REF elem,
        AngleArg angle_rad )
    {
        SIXTRL_CXX_NAMESPACE::SRotation_set_angle_rad( &elem, angle_rad );
    }
}


template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::SRotationTraits<
        SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > >::real_t
            >::const_existing_type
NS(SRotation_cos_z)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::SRoation_cos_z( elem );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::SRotationTraits<
        SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > >::real_t
            >::const_existing_type
NS(SRotation_sin_z)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::SRoation_sin_z( elem );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::SRotationTraits<
        SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > >::real_t >::value_type
NS(SRotation_angle)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::SRoation_angle( elem );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign >
SIXTRL_INLINE typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
    typename SIXTRL_CXX_NAMESPACE::SRotationTraits<
        SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > >::real_t >::value_type
NS(SRotation_angle_rad)( SIXTRL_BE_ARGPTR_DEC const
    SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign > *const
        SIXTRL_RESTRICT elem )
{
    return SIXTRL_CXX_NAMESPACE::SRoation_angle_rad( elem );
}

/* setter API, ptr argument: */

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign, typename CosArg >
SIXTRL_INLINE void NS(SRotation_set_cos_z)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem, CosArg cos_z )
{
    return SIXTRL_CXX_NAMESPACE::SRoation_set_cos_z( elem, cos_z );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign, typename SinArg >
SIXTRL_INLINE void NS(SRotation_set_sin_z)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem, SinArg sin_z )
{
    return SIXTRL_CXX_NAMESPACE::SRoation_set_sin_z( elem, sin_z );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign, typename AngleArg >
SIXTRL_INLINE void NS(SRotation_set_angle)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem, AngleArg angle_deg )
{
    return SIXTRL_CXX_NAMESPACE::SRoation_set_angle( elem, angle_deg );
}

template< class R, SIXTRL_CXX_NAMESPACE::arch_size_t RAlign, typename AngleArg >
SIXTRL_INLINE void NS(SRotation_set_angle_rad)(
    SIXTRL_BE_ARGPTR_DEC SIXTRL_CXX_NAMESPACE::SRotationData< R, RAlign >*
        SIXTRL_RESTRICT elem, AngleArg angle_rad )
{
    return SIXTRL_CXX_NAMESPACE::SRoation_set_angle_rad( elem, angle_rad );
}

#endif /* !defined( __cplusplus ) */
#endif /* SIXTRACKLIB_COMMON_BEAM_ELEMENTS_SROTATION_SROTATION_DATA_API_CXX_HPP__ */
