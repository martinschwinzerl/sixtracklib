#ifndef SIXTRACKLIB_COMMON_BEAM_ELEMENTS_DRIFT_EXACT_DRIFT_EXACT_DATA_API_CXX_HPP__
#define SIXTRACKLIB_COMMON_BEAM_ELEMENTS_DRIFT_EXACT_DRIFT_EXACT_DATA_API_CXX_HPP__

#if !defined( SIXTRL_NO_INCLUDES )
    #include "sixtracklib/common/beam_elements/drift_exact/drift_exact_data.hpp"
    #include "sixtracklib/common/internal/type_store_traits.hpp"
#endif /* !defined( SIXTRL_NO_INCLUDES ) */

#if defined( __cplusplus )
namespace SIXTRL_CXX_NAMESPACE
{
    /* ********************************************************************* */
    /** SixTrackLib: Add autogenerated C++ API */
    /* ********************************************************************* */

    /* init API: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >*
    DriftExact_preset( SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN void DriftExact_init(
        SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >* SIXTRL_RESTRICT
            elem ) SIXTRL_NOEXCEPT;

    template< class R, arch_size_t RAlign, typename LengthArg >
    SIXTRL_STATIC SIXTRL_FN void DriftExact_init_detailed(
        SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >* SIXTRL_RESTRICT elem,
        LengthArg length );

    /* getter API, ptr argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        DriftExactTraits< DriftExactData< R, RAlign > >::real_t
            >::const_existing_type
    DriftExact_length( SIXTRL_BE_ARGPTR_DEC const DriftExactData<
        R, RAlign > *const SIXTRL_RESTRICT drift ) SIXTRL_NOEXCEPT;

    /* setter API, ptr argument: */

    template< class R, arch_size_t RAlign, typename LengthArg >
    SIXTRL_STATIC SIXTRL_FN void DriftExact_set_length(
        SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >* SIXTRL_RESTRICT elem,
        LengthArg length );

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    /* getter API, ref argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_STATIC SIXTRL_FN typename TypeMethodParamTraits< typename
        DriftExactTraits< DriftExactData< R, RAlign > >::real_t
            >::const_existing_type
    DriftExact_length( SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign > const&
        SIXTRL_RESTRICT_REF drift ) SIXTRL_NOEXCEPT;

    /* setter API, ref argument: */

    template< class R, arch_size_t RAlign, typename LengthArg >
    SIXTRL_STATIC SIXTRL_FN void DriftExact_set_length(
        SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >&
            SIXTRL_RESTRICT_REF elem, LengthArg length );
}

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/* !!!!!!!        Inline Methods and Functions Implementations       !!!!!!!! */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

namespace SIXTRL_CXX_NAMESPACE
{
    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >*
    DriftExact_preset( SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >*
        SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        if( elem != SIXTRL_NULLPTR )
        {
            typedef typename DriftExactTraits<
                DriftExactData< R, RAlign > >::real_t real_t;

            SIXTRL_CXX_NAMESPACE::DriftExact_set_length( elem, real_t{ 0 } );
        }

        return elem;
    }

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE void DriftExact_init( SIXTRL_BE_ARGPTR_DEC DriftExactData<
        R, RAlign >* SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_CXX_NAMESPACE::DriftExact_preset( elem );
    }

    template< class R, arch_size_t RAlign, typename LengthArg >
    SIXTRL_INLINE void DriftExact_init_detailed(
        SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign >* SIXTRL_RESTRICT elem,
        LengthArg length )
    {
        SIXTRL_CXX_NAMESPACE::DriftExact_set_length( elem, length );
    }

    /* getter API, ptr argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        DriftExactTraits< DriftExactData< R, RAlign > >::real_t
            >::const_existing_type
    DriftExact_length( SIXTRL_BE_ARGPTR_DEC const DriftExactData<
        R, RAlign > *const SIXTRL_RESTRICT elem ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        return elem->length;
    }

    /* setter API, ptr argument: */

    template< class R, arch_size_t RAlign, typename LengthArg >
    SIXTRL_INLINE void DriftExact_set_length( SIXTRL_BE_ARGPTR_DEC
        DriftExactData< R, RAlign >* SIXTRL_RESTRICT elem, LengthArg length )
    {
        typedef typename std::decay< LengthArg >::type src_t;
        typedef typename DriftExactTraits<
            DriftExactData< R, RAlign > >::real_t dest_t;

        SIXTRL_ASSERT( elem != SIXTRL_NULLPTR );
        SIXTRL_CXX_NAMESPACE::Types_perform_assignment< src_t, dest_t >(
            elem->length, length );
    }

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    /* getter API, ref argument: */

    template< class R, arch_size_t RAlign >
    SIXTRL_INLINE typename TypeMethodParamTraits< typename
        DriftExactTraits< DriftExactData< R, RAlign > >::real_t
            >::const_existing_type
    DriftExact_length( SIXTRL_BE_ARGPTR_DEC DriftExactData< R, RAlign > const&
        SIXTRL_RESTRICT_REF elem ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::DriftExact_length( &elem );
    }

    /* setter API, ref argument: */

    template< class R, arch_size_t RAlign, typename LengthArg >
    SIXTRL_INLINE void DriftExact_set_length( SIXTRL_BE_ARGPTR_DEC
        DriftExactData< R, RAlign >& SIXTRL_RESTRICT_REF elem,
        LengthArg length )
    {
        SIXTRL_CXX_NAMESPACE::DriftExact_set_length( &elem, length );
    }
}

#endif /* !defined( __cplusplus ) */
#endif /* SIXTRACKLIB_COMMON_BEAM_ELEMENTS_DRIFT_EXACT_DRIFT_EXACT_DATA_API_CXX_HPP__ */
