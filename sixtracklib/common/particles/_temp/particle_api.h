#ifndef SIXTRACKLIB_COMMON_PARTICLES_PARTICLE_API_H__
#define SIXTRACKLIB_COMMON_PARTICLES_PARTICLE_API_H__

#if defined( __cplusplus )
#if !defined( SIXTRL_NO_INCLUDES )
    #include <type_traits>
#endif /* !defined( SIXTRL_NO_INCLUDES ) */
#endif /* c++ */

#if !defined( SIXTRL_NO_INCLUDES )
    #include "sixtracklib/common/particles/particle.h"
    #include "sixtracklib/common/internal/math_functions.h"
    #include "sixtracklib/common/internal/physics_constants.h"
    #include "sixtracklib/common/internal/type_store_traits.hpp"
#endif /* !defined( SIXTRL_NO_INCLUDES ) */

#if defined( __cplusplus )
namespace SIXTRL_CXX_NAMESPACE
{
    /* ********************************************************************* */
    /** SixTrackLib: Add autogenerated C++ API */
    /* ********************************************************************* */

    /* default: */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_charge0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
    {
        return SIXTRL_CXX_NAMESPACE::PhysConst_charge0_for_particle( p );
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_mass0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
    {
        return SIXTRL_CXX_NAMESPACE::PhysConst_mass_proton_ev_for_particle( p );
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_beta0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_pc0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_s( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_x( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_px( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_y( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_py( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_zeta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_psigma( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_delta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_rpp( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_rvv( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_chi( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::value_type >::type
    Particle_default_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
        *const SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR  )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::real_t >::value_type{ 1 };
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::value_type >::type
    Particle_default_state( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::index_t >::value_type{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::value_type >::type
    Particle_default_at_element( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
        *const SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::index_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::value_type >::type
    Particle_default_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::index_t >::value_type{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::value_type >::type
    Particle_default_id( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        return typename TypeMethodParamTraits<
            typename ParticleTraits< ParticleT >::index_t >::value_type{ 0 };
    }

    /* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_charge0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p  )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->charge0 = SIXTRL_CXX_NAMESPACE::Particle_default_charge0( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_mass0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->mass0 = SIXTRL_CXX_NAMESPACE::Particle_default_mass0( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_beta0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->beta0 = SIXTRL_CXX_NAMESPACE::Particle_default_beta0( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p  )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->gamma0 = SIXTRL_CXX_NAMESPACE::Particle_default_gamma0( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_pc0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p  )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->pc0 = SIXTRL_CXX_NAMESPACE::Particle_default_pc0( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_s( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->s = SIXTRL_CXX_NAMESPACE::Particle_default_s( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_x( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->x = SIXTRL_CXX_NAMESPACE::Particle_default_x( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_px( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->px = SIXTRL_CXX_NAMESPACE::Particle_default_px( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_y( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->y = SIXTRL_CXX_NAMESPACE::Particle_default_y( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_py( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->py = SIXTRL_CXX_NAMESPACE::Particle_default_py( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_zeta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->zeta = SIXTRL_CXX_NAMESPACE::Particle_default_zeta( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_psigma( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->psigma = SIXTRL_CXX_NAMESPACE::Particle_default_psigma( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_delta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->delta = SIXTRL_CXX_NAMESPACE::Particle_default_delta( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_rpp( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->rpp = SIXTRL_CXX_NAMESPACE::Particle_default_rpp( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_rvv( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->rvv = SIXTRL_CXX_NAMESPACE::Particle_default_rvv( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_chi( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->chi = SIXTRL_CXX_NAMESPACE::Particle_default_chi( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_charge_ratio(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p   )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->charge_ratio =
            SIXTRL_CXX_NAMESPACE::Particle_default_charge_ratio( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_state( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p  )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->state = SIXTRL_CXX_NAMESPACE::Particle_default_state( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_at_element(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p  )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->at_element = SIXTRL_CXX_NAMESPACE::Particle_default_at_element( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p  )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->at_turn = SIXTRL_CXX_NAMESPACE::Particle_default_at_turn( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_id( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p  )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->id = SIXTRL_CXX_NAMESPACE::Particle_default_id( p );
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    /* --------------------------------------------------------------------- */
    /* setter API */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_charge0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type charge0 )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                charge0, typename ParticleTraits< ParticleT >::real_t{ 0 } ) );

        p->charge0 = charge0;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_charge0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t charge0;

        if( st::Types_perform_assignment< src_t, real_t >( charge0, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_charge0( p, charge0 );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_mass0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type mass0 )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                mass0, typename ParticleTraits< ParticleT >::real_t{ 0 } ) );

        p->mass0 = mass0;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_mass0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t mass0;

        if( st::Types_perform_assignment< src_t, real_t >( mass0, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_mass0( p, mass0 );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_beta0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type beta0 )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                beta0, typename ParticleTraits< ParticleT >::real_t{ 0 } ) );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_less_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                beta0, typename ParticleTraits< ParticleT >::real_t{ 1 } ) );

        p->beta0 = beta0;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_beta0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t beta0;

        if( st::Types_perform_assignment< src_t, real_t >( beta0, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_beta0( p, beta0 );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_gamma0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type gamma0 )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                gamma0, typename ParticleTraits< ParticleT >::real_t{ 1 } ) );

        p->gamma0 = gamma0;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t gamma0;

        if( st::Types_perform_assignment< src_t, real_t >( gamma0, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_gamma0( p, gamma0 );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_pc0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type pc0 )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                pc0, typename ParticleTraits< ParticleT >::real_t{ 0 } ) );

        p->pc0 = pc0;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_pc0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t pc0;

        if( st::Types_perform_assignment< src_t, real_t >( pc0, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_pc0( p, pc0 );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_s(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type s )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->s = s;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_s( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t s;

        if( st::Types_perform_assignment< src_t, real_t >( s, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_s( p, s );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_x(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type x )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->x = x;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_x( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t x;

        if( st::Types_perform_assignment< src_t, real_t >( x, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_x( p, x );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_px(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type px )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->px = px;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_px( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t px;

        if( st::Types_perform_assignment< src_t, real_t >( px, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_px( p, px );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_y(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type y )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->y = y;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_y( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t y;

        if( st::Types_perform_assignment< src_t, real_t >( y, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_y( p, y );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_py(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type py )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->py = py;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_py( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t py;

        if( st::Types_perform_assignment< src_t, real_t >( py, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_py( p, py );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_zeta(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type zeta )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->zeta = zeta;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_zeta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t zeta;

        if( st::Types_perform_assignment< src_t, real_t >( zeta, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_zeta( p, zeta );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_psigma(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type psigma )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->psigma = psigma;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_psigma( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t psigma;

        if( st::Types_perform_assignment< src_t, real_t >( psigma, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_psigma( p, psigma );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_delta(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type delta )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->delta = delta;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_delta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t delta;

        if( st::Types_perform_assignment< src_t, real_t >( delta, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_delta( p, delta );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_rpp(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type rpp )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                rpp, typename ParticleTraits< ParticleT >::real_t{ 0 } ) );

        p->rpp = rpp;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_rpp( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t rpp;

        if( st::Types_perform_assignment< src_t, real_t >( rpp, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_rpp( p, rpp );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_rvv(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type rvv )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                rvv, typename ParticleTraits< ParticleT >::real_t{ 0 } ) );

        p->rvv = rvv;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_rvv( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t rvv;

        if( st::Types_perform_assignment< src_t, real_t >( rvv, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_rvv( p, rvv );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_chi(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type chi )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                chi, typename ParticleTraits< ParticleT >::real_t{ 0 } ) );

        p->chi = chi;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_chi( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t chi;

        if( st::Types_perform_assignment< src_t, real_t >( chi, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_chi( p, chi );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_charge_ratio(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_argument_type charge_ratio )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( SIXTRL_CXX_NAMESPACE::Type_comp_all_more_or_equal<
            typename ParticleTraits< ParticleT >::real_t >(
                SIXTRL_CXX_NAMESPACE::abs< typename ParticleTraits< ParticleT
                    >::real_t >( charge_ratio ),
                typename ParticleTraits< ParticleT >::real_t{ 0 } ) );

        p->charge_ratio = charge_ratio;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::real_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        real_t charge_ratio;

        if( st::Types_perform_assignment< src_t, real_t >( charge_ratio, arg )
                == st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_charge_ratio( p, charge_ratio );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_state(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_argument_type state )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->state = state;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::index_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_state( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::index_t index_t;

        index_t state;

        if( st::Types_perform_assignment< src_t, index_t >( state, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_state( p, state );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_at_element(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_argument_type at_element )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->at_element = at_element;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::index_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_at_element( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::index_t index_t;

        index_t at_element;

        if( st::Types_perform_assignment< src_t, index_t >( at_element, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_at_element( p, at_element );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_at_turn(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_argument_type at_turn )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->at_turn = at_turn;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::index_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::index_t index_t;

        index_t at_turn;

        if( st::Types_perform_assignment< src_t, index_t >( at_turn, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_at_turn( p, at_turn );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_id(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_argument_type id )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->id = id;
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename ArgT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >() &&
        !std::is_same< typename std::decay< ArgT >::type,
            typename ParticleTraits< ParticleT >::index_t >(),
        SIXTRL_CXX_NAMESPACE::arch_status_t >::type
    Particle_set_id( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, ArgT arg )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< ArgT >::type src_t;
        typedef typename ParticleTraits< ParticleT >::index_t index_t;

        index_t id;

        if( st::Types_perform_assignment< src_t, index_t >( id, arg ) ==
                st::ARCH_STATUS_SUCCESS )
        {
            return st::Particle_set_id( p, id );
        }

        return st::ARCH_STATUS_GENERAL_FAILURE;
    }

    /* --------------------------------------------------------------------- */
    /* getter API: */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_charge0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->charge0;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_mass0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->mass0;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_beta0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->beta0;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->gamma0;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_pc0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->pc0;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_s( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->s;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_x( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->x;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_px( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->px;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_y( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->y;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_py( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->py;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_zeta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->zeta;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_psigma( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->psigma;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_delta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->delta;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_rpp( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->rpp;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_rvv( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->rvv;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_chi( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->chi;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->charge_ratio;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_existing_type >::type
    Particle_state( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->state;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_existing_type >::type
    Particle_at_element( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->at_element;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_existing_type >::type
    Particle_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->at_turn;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_existing_type >::type
    Particle_id( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->id;
    }
}

/* default: */

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
        typename SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::value_type >::type
 NS(Particle_default_charge0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_charge0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
        typename SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::value_type >::type
 NS(Particle_default_mass0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_mass0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_beta0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_beta0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
        typename SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::value_type >::type
 NS(Particle_default_gamma0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_gamma0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
        typename SIXTRL_CXX_NAMESPACE::ParticleTraits<
            ParticleT >::real_t >::value_type >::type
 NS(Particle_default_pc0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_pc0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits<
        typename SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::value_type >::type
 NS(Particle_default_s)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_s( p );;
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_x)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_x( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_px)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_px( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_y)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_y( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_py)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_py( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_zeta)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_zeta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_psigma)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_psigma( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_delta)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_delta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_rpp)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_rpp( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_rvv)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_rvv( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_chi)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_chi( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t >::value_type
            >::type
 NS(Particle_default_charge_ratio)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
    *const SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_charge_ratio( p );
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
            >::value_type >::type
 NS(Particle_default_state)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_state( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
            >::value_type >::type
 NS(Particle_default_at_element)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
    *const SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_at_element( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
            >::value_type >::type
 NS(Particle_default_at_turn)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_at_element( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    typename SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
            >::value_type >::type
 NS(Particle_default_id)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_id( p );
}

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_charge0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_mass0)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_mass0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_beta0)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_beta0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_gamma0)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_gamma0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_pc0)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_pc0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_s)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_s( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_x)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_x( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_px)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_px( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_y)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_y( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_py)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_py( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_zeta)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_zeta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_psigma)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_psigma( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_delta)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_delta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_rpp)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_rpp( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_rvv)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_rvv( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_chi)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_chi( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_charge_ratio)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
    *const SIXTRL_RESTRICT p   )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_charge_ratio( p );
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_state)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_state( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_at_element)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
    *const SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_at_element( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_at_turn)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_at_turn( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
 NS(Particle_set_default_id)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p  )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_id( p );
}

/* --------------------------------------------------------------------- */
/* setter API */

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_charge0( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_mass0( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_beta0( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_gamma0( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_pc0( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_s( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_x( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_px( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_y( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_py( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_zeta( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_psigma( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_delta( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_rpp( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_rvv)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_rvv( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_chi)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_chi( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_charge_ratio)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_charge_ratio( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_state)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT
    p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_state( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_at_element)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_at_element( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_at_turn)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p, ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_at_turn( p, arg );
}

template< class ParticleT, typename ArgT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
    SIXTRL_CXX_NAMESPACE::ObjData_is_particle< ParticleT >(),
    SIXTRL_CXX_NAMESPACE::arch_status_t >::type
NS(Particle_set_id)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p,
                     ArgT arg )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_id( p, arg );
}

#endif /* c++ */

#if defined( __cplusplus ) && !defined( _GPUCODE )
extern "C" {
#endif /* C++, Host */

/* default */

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_charge0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_mass0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_beta0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_gamma0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_pc0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_s)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_x)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_px)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_y)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_py)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_zeta)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_psigma)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_delta)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_rpp)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_rvv)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_chi)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_charge_ratio)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_state)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_at_element)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_at_turn)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_id)( void ) SIXTRL_NOEXCEPT;

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

/* --------------------------------------------------------------------- */
/* setter API */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const charge0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const mass0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const beta0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const gamma0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const pc0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const s ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const x ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const px ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const y ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const py ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const zeta ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const psigma ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const delta ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const rpp ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const rvv ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const chi ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const charge_ratio ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const state ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const at_element ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const at_turn ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const id ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* getter API */

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t) NS(Particle_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t) NS(Particle_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t) NS(Particle_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t) NS(Particle_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

#if defined( __cplusplus ) && !defined( _GPUCODE )
}
#endif /* C++, Host */

#if defined( __cplusplus ) && !defined( _GPUCODE )
extern "C" {
#endif /* C++, Host */

/* default */

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_charge0)( void ) SIXTRL_NOEXCEPT
{
    return NS(PhysConst_charge0)();
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_mass0)( void ) SIXTRL_NOEXCEPT
{
    return NS(PhysConst_mass_proton_ev)();
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_beta0)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_gamma0)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_pc0)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_s)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_x)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_px)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_y)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_py)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_zeta)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_psigma)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_delta)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_rpp)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_rvv)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_chi)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_charge_ratio)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_state)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_index_t) )1;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_at_element)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_index_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_at_turn)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_index_t) )0;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_id)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_index_t) )0;
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->charge0 = NS(Particle_default_charge0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->mass0 = NS(Particle_default_mass0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->beta0 = NS(Particle_default_beta0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->gamma0 = NS(Particle_default_gamma0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->pc0 = NS(Particle_default_pc0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->s = NS(Particle_default_s)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->x = NS(Particle_default_x)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->px = NS(Particle_default_px)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->y = NS(Particle_default_y)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->py = NS(Particle_default_py)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->zeta = NS(Particle_default_zeta)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->psigma = NS(Particle_default_psigma)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->delta = NS(Particle_default_delta)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->rpp = NS(Particle_default_rpp)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->rvv = NS(Particle_default_rvv)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->chi = NS(Particle_default_chi)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->charge_ratio = NS(Particle_default_charge_ratio)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->state = NS(Particle_default_state)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->at_element = NS(Particle_default_at_element)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->at_turn = NS(Particle_default_at_turn)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->id = NS(Particle_default_id)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

/* ------------------------------------------------------------------------- */
/* setter API */

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const charge0 ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->charge0 = charge0;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const mass0 ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( mass0 >= ( NS(particle_real_t) )0 );
    p->mass0 = mass0;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const beta0 ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( beta0 >= ( NS(particle_real_t) )0 );
    SIXTRL_ASSERT( beta0 <= ( NS(particle_real_t) )1 );
    p->beta0 = beta0;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const gamma0 ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( gamma0 >= ( NS(particle_real_t) )1 );
    p->gamma0 = gamma0;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const pc0 ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->pc0 = pc0;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const s ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( s >= ( NS(particle_real_t) )0 );
    p->s = s;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const x ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->x = x;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const px ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->px = px;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const y ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->y= y;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const py ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->py = py;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const zeta ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->zeta = zeta;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const psigma ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->psigma = psigma;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const delta ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->delta = delta;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const rpp ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( rpp >= ( NS(particle_real_t) )0 );
    p->rpp = rpp;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const rvv ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( rvv >= ( NS(particle_real_t) )0 );
    p->rvv = rvv;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const chi ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->chi = chi;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const charge_ratio ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    SIXTRL_ASSERT( NS(abs)( charge_ratio ) > ( NS(particle_real_t) )0 );
    p->charge_ratio = charge_ratio;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const state ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->state = state;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const at_element ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->at_element = at_element;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const at_turn ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->at_turn = at_turn;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const id ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->id = id;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

/* ------------------------------------------------------------------------- */
/* getter API */

SIXTRL_INLINE NS(particle_real_t) NS(Particle_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->charge0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->mass0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->beta0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->gamma0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_pc0)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->pc0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_s)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->s;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_x)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->x;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_px)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->px;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_y)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->y;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_py)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->py;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_zeta)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->zeta;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->psigma;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->delta;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_rpp)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->rpp;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_rvv)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->rvv;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_chi)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->chi;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->charge_ratio;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->state;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->at_element;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->at_turn;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_id)( SIXTRL_PARTICLE_ARGPTR_DEC
    const NS(Particle) *const SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->id;
}

#if defined( __cplusplus ) && !defined( _GPUCODE )
}
#endif /* C++, Host */

#endif /* SIXTRACKLIB_COMMON_PARTICLES_PARTICLE_API_H__ */
