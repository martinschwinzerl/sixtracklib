#ifndef SIXTRACKLIB_COMMON_PARTICLES_PARTICLE_UNIT_API_H__
#define SIXTRACKLIB_COMMON_PARTICLES_PARTICLE_UNIT_API_H__

#if defined( __cplusplus )
#if !defined( SIXTRL_NO_INCLUDES )
    #include <type_traits>
#endif /* !defined( SIXTRL_NO_INCLUDES ) */
#endif /* c++ */

#if !defined( SIXTRL_NO_INCLUDES )
    #include "sixtracklib/common/particles/particle_unit.h"
    #include "sixtracklib/common/internal/math_functions.h"
    #include "sixtracklib/common/internal/physics_constants.h"
    #include "sixtracklib/common/internal/type_store_traits.hpp"
    #include "sixtracklib/common/internal/type_comparison_helpers.hpp"
#endif /* !defined( SIXTRL_NO_INCLUDES ) */

#if defined( __cplusplus )
namespace SIXTRL_CXX_NAMESPACE
{
    /* ********************************************************************* */
    /** SixTrackLib: Add autogenerated C++ API */
    /* ********************************************************************* */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::particle_num_elements_t >::type
    Particle_num_particles( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
        *const SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::particle_num_elements_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_FN constexpr typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        SIXTRL_CXX_NAMESPACE::particle_num_elements_t >::type
    Particle_num_particles( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
        *const SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR ) SIXTRL_NOEXCEPT
    {
        return ParticleTraits< ParticleT >::num_particles;
    }

    /* --------------------------------------------------------------------- */
    /* is legal */

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* charge0 */

    template< class RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_charge0_legal(
        RealArg charge0 ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type real_t;
        return st::Type_comp_all_more< real_t >( st::abs< real_t >(
            charge0 ), real_t{ 0 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* mass0 */

    template< class RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_mass0_legal(
        RealArg mass0 ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type real_t;
        return st::Type_comp_all_more< real_t >( mass0, real_t{ 0 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* beta0 */

    template< class RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_beta0_legal(
        RealArg beta0 ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type real_t;
        return
            st::Type_comp_all_more_or_equal< real_t >( beta0, real_t{ 0 } ) &&
            st::Type_comp_all_less_or_equal< real_t >( beta0, real_t{ 1 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* gamma0 */

    template< class RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_gamma0_legal(
        RealArg gamma0 ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type real_t;
        return st::Type_comp_all_more_or_equal< real_t >( gamma0, real_t{ 1 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* pc0 */

    template< class RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_pc0_legal(
        RealArg pc0 ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type real_t;
        return st::Type_comp_all_more_or_equal< real_t >( pc0, real_t{ 0 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* chi */

    template< class RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_chi_legal(
        RealArg chi ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type real_t;
        return st::Type_comp_all_more< real_t >(
            st::abs< real_t >( chi ), real_t{ 0 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* charge_ratio */

    template< class RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_charge_ratio_legal(
        RealArg charge_ratio ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type real_t;
        return st::Type_comp_all_more< real_t >( st::abs< real_t >(
            charge_ratio ), real_t{ 0 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* state */

    template< class IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_state_legal(
        IndexArg state ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< IndexArg >::type index_t;
        return
            st::Type_comp_all_more_or_equal< index_t >( state, index_t{ 0 } ) &&
            st::Type_comp_all_less_or_equal< index_t >( state, index_t{ 1 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* at_element */

    template< class IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_at_element_legal(
        IndexArg at_element ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< IndexArg >::type index_t;
        return st::Type_comp_all_more_or_equal< index_t >(
            at_element, index_t{ 0 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* at_turn */

    template< class IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_at_turn_legal(
        IndexArg at_turn ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< IndexArg >::type index_t;
        return st::Type_comp_all_more_or_equal< index_t >(
            at_turn, index_t{ 0 } );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* id */

    template< class IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool Particle_is_id_legal(
        IndexArg id ) SIXTRL_NOEXCEPT
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< IndexArg >::type index_t;
        return st::Type_comp_all_more_or_equal< index_t >( id, index_t{ 0 } );
    }

    /* --------------------------------------------------------------------- */
    /* setter */

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* charge0 */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_charge0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* charge0 */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_charge0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg charge0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_charge0_legal( charge0 ) )
        {
            p->charge0 = charge0;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_charge0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg charge0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_charge0_legal( charge0 ) )
        {
            p->charge0 = std::move( charge0 );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_charge0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg charge0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type charge0_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_charge0_legal( charge0 ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< charge0_real_t, real_t >(
                p->charge0, charge0 );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* mass0 */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_mass0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* mass0 */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_mass0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg mass0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_mass0_legal( mass0 ) )
        {
            p->mass0 = mass0;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_mass0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg mass0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_mass0_legal( mass0 ) )
        {
            p->mass0 = std::move( mass0 );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_mass0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg mass0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type mass0_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_mass0_legal( mass0 ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< mass0_real_t, real_t >(
                p->mass0, mass0 );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* beta0 */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_beta0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* beta0 */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_beta0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg beta0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_beta0_legal( beta0 ) )
        {
            p->beta0 = beta0;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_beta0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg beta0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_beta0_legal( beta0 ) )
        {
            p->beta0 = std::move( beta0 );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_beta0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg beta0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type beta0_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_beta0_legal( beta0 ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< beta0_real_t, real_t >(
                p->beta0, beta0 );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* gamma0 */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* gamma0 */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg gamma0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_gamma0_legal( gamma0 ) )
        {
            p->gamma0 = gamma0;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg gamma0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_gamma0_legal( gamma0 ) )
        {
            p->gamma0 = std::move( gamma0 );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg gamma0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type gamma0_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_gamma0_legal( gamma0 ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< gamma0_real_t, real_t >(
                p->gamma0, gamma0 );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* pc0 */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_pc0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* pc0 */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_pc0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg pc0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_pc0_legal( pc0 ) )
        {
            p->pc0 = pc0;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_pc0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg pc0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_pc0_legal( pc0 ) )
        {
            p->pc0 = std::move( pc0 );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_pc0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg pc0 )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type pc0_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_pc0_legal( pc0 ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< pc0_real_t, real_t >(
                p->pc0, pc0 );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* s */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_s( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* s */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_s( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg s )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->s = s;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_s( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg s )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->s = std::move( s );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_s( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg s )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type s_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< s_real_t, real_t >(
            p->s, s );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* x */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_x( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* x */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_x( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg x )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->x = x;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_x( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg x )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->x = std::move( x );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_x( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg x )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type x_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< x_real_t, real_t >( p->x, x );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* px */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_px( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* px */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_px( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg px )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->px = px;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_px( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg px )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->px = std::move( px );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_px( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg px )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type px_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< px_real_t, real_t >( p->px, px );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* y */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_y( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* y */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_y( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg y )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->y = y;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_y( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg y )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->y = std::move( y );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_y( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg y )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type y_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< y_real_t, real_t >( p->y, y );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* py */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_py( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* py */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_py( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg py )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->py = py;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_py( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg py )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->py = std::move( py );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_py( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg py )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type py_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< py_real_t, real_t >( p->py, py );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* zeta */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_zeta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* zeta */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_zeta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg zeta )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->zeta = zeta;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_zeta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg zeta )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->zeta = std::move( zeta );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_zeta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg zeta )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type zeta_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< zeta_real_t, real_t >(
            p->zeta, zeta );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* delta */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_delta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* delta */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_delta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg delta )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->delta = delta;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_delta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg delta )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->delta = std::move( delta );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_delta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg delta )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type delta_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< delta_real_t, real_t >(
            p->delta, delta );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* psigma */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_psigma( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* psigma */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_psigma( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg psigma )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->psigma = psigma;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_psigma( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg psigma )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->psigma = std::move( psigma );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_psigma( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg psigma )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type psigma_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< psigma_real_t, real_t >(
            p->psigma, psigma );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* rpp */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_rpp( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* rpp */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_rpp( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg rpp )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->rpp = rpp;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_rpp( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg rpp )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->rpp = std::move( rpp );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_rpp( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg rpp )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type rpp_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< rpp_real_t, real_t >(
            p->rpp, rpp );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* rvv */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_rvv( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* rvv */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_rvv( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg rvv )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->rvv = rvv;
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_rvv( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg rvv )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->rvv = std::move( rvv );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_rvv( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg rvv )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type rvv_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return st::Types_perform_assignment< rvv_real_t, real_t >(
            p->rvv, rvv );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* chi */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_chi( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* chi */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_chi( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg chi )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_chi_legal( chi ) )
        {
            p->chi = chi;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_chi( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg chi )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_chi_legal( chi ) )
        {
            p->chi = std::move( chi );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_chi( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg chi )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type chi_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_chi_legal( chi ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< chi_real_t, real_t >(
                p->chi, chi );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* charge_ratio */

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, RealArg /* charge_ratio */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg charge_ratio )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_charge_ratio_legal( charge_ratio ) )
        {
            p->charge_ratio = charge_ratio;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg charge_ratio )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_charge_ratio_legal( charge_ratio ) )
        {
            p->charge_ratio = std::move( charge_ratio );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename RealArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< RealArg,
            typename ParticleTraits< ParticleT >::real_t >(),
        arch_status_t >::type
    Particle_set_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, RealArg charge_ratio )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< RealArg >::type charge_status_real_t;
        typedef typename ParticleTraits< ParticleT >::real_t real_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_charge_ratio_legal( charge_ratio ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< charge_status_real_t,
                real_t >( p->charge_ratio, charge_ratio );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* state */

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_state( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, IndexArg /* state */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_state( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg state )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_state_legal( state ) )
        {
            p->state = state;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_state( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg state )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_state_legal( state ) )
        {
            p->state = std::move( state );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_state( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg state )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< IndexArg >::type state_index_t;
        typedef typename ParticleTraits< ParticleT >::index_t index_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_state_legal( state ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< state_index_t, index_t >(
                p->state, state );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* at_element */

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_at_element( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, IndexArg /* at_element */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_at_element( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg at_element )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_at_element_legal( at_element ) )
        {
            p->at_element = at_element;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_at_element( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg at_element )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_at_element_legal( at_element ) )
        {
            p->at_element = std::move( at_element );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_at_element( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg at_element )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< IndexArg >::type at_element_index_t;
        typedef typename ParticleTraits< ParticleT >::index_t index_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_at_element_legal( at_element ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment<
                at_element_index_t, index_t >( p->at_element, at_element );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* at_turn */

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, IndexArg /* at_turn */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg at_turn )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_at_turn_legal( at_turn ) )
        {
            p->at_turn = at_turn;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg at_turn )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_at_turn_legal( at_turn ) )
        {
            p->at_turn = std::move( at_turn );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg at_turn )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< IndexArg >::type at_turn_index_t;
        typedef typename ParticleTraits< ParticleT >::index_t index_t;

        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        if( st::Particle_is_at_turn_legal( at_turn ) )
        {
            SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
            status = st::Types_perform_assignment< at_turn_index_t, index_t >(
                p->at_turn, at_turn );
        }

        return status;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* id */

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_id( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */, IndexArg /* id */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_id( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg id )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_id_legal( id ) )
        {
            p->id = id;
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >() &&
        SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_id( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg id )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        st::arch_status_t status = st::ARCH_STATUS_GENERAL_FAILURE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        if( st::Particle_is_id_legal( id ) )
        {
            p->id = std::move( id );
            status = st::ARCH_STATUS_SUCCESS;
        }

        return status;
    }

    template< class ParticleT, typename IndexArg >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_direct_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >() &&
        !SIXTRL_CXX_NAMESPACE::Types_same_and_move_assignable< IndexArg,
            typename ParticleTraits< ParticleT >::index_t >(),
        arch_status_t >::type
    Particle_set_id( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT p, IndexArg id )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        typedef typename std::decay< IndexArg >::type id_index_t;
        typedef typename ParticleTraits< ParticleT >::index_t index_t;

        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        SIXTRL_ASSERT( st::Particle_is_id_legal( id ) );
        return st::Types_perform_assignment< id_index_t, index_t >(
            p->id, id );
    }

    /* --------------------------------------------------------------------- */
    /* getter: */

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* charge0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_charge0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_charge0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->charge0;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* mass0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_mass0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_mass0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->mass0;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* beta0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_beta0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_beta0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->beta0;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* gamma0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->gamma0;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* pc0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_pc0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_pc0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->pc0;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* s */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_s( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_s( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->s;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* x */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_x( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_x( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->x;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* px */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_px( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_px( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->px;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* y */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_y( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_y( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->y;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* py */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_py( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_py( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->py;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* zeta */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_zeta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_zeta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->zeta;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* delta */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_delta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_delta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->delta;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* psigma */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_psigma( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_psigma( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->psigma;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* rpp */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_rpp( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_rpp( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->rpp;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* rvv */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_rvv( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_rvv( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->rvv;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* chi */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_chi( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_chi( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->chi;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* charge_ratio */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_real_t >::type
    Particle_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::real_t >::const_existing_type >::type
    Particle_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->charge_ratio;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* state */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_index_t >::type
    Particle_state( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_index_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_existing_type >::type
    Particle_state( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->state;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* at_element */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_index_t >::type
    Particle_at_element( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_index_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_existing_type >::type
    Particle_at_element( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->at_element;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* at_turn */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_index_t >::type
    Particle_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_index_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_existing_type >::type
    Particle_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->at_turn;
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* id */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        particle_index_t >::type
    Particle_id( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle unit class" );
        return particle_index_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        typename TypeMethodParamTraits< typename ParticleTraits<
            ParticleT >::index_t >::const_existing_type >::type
    Particle_id( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        return p->id;
    }

    /* --------------------------------------------------------------------- */
    /* default: */

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* charge0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_charge0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return SIXTRL_CXX_NAMESPACE::PhysConst_charge0_for_particle( p );
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_charge0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_charge0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->charge0 = st::Particle_default_charge0( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_charge0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_charge0( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_charge0( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* mass0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_mass0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return SIXTRL_CXX_NAMESPACE::PhysConst_mass_proton_ev_for_particle( p );
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_mass0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_mass0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->mass0 = st::Particle_default_mass0( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_mass0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_mass0( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_mass0( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* beta0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_beta0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_beta0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_beta0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->beta0 = st::Particle_default_beta0( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_beta0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_beta0( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_beta0( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* gamma0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_gamma0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_gamma0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->gamma0 = st::Particle_default_gamma0( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_gamma0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_gamma0( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_gamma0( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* pc0 */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_pc0( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_pc0( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_pc0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->pc0 = st::Particle_default_pc0( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_pc0(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_pc0( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_pc0( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* s */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_s( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_s( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_s(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->s = st::Particle_default_s( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_s(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_s( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_s( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* x */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_x( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_x( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_x(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->x = st::Particle_default_x( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_x(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_x( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_x( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* px */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_px( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_px( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_px(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->px = st::Particle_default_px( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_px(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_px( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_px( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* y */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_y( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_y( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_y(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->y = st::Particle_default_y( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_y(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_y( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_y( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* py */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_py( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_py( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_py(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->py = st::Particle_default_py( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_py(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_py( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_py( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* zeta */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_zeta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_zeta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_zeta(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->zeta = st::Particle_default_zeta( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_zeta(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_zeta( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_zeta( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* delta */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_delta( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_delta( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_delta(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->delta = st::Particle_default_delta( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_delta(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_delta( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_delta( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* psigma */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_psigma( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_psigma( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_psigma(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->psigma = st::Particle_default_psigma( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_psigma(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_psigma( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_psigma( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* rpp */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_rpp( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_rpp( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_rpp(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->rpp = st::Particle_default_rpp( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_rpp(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_rpp( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_rpp( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* rvv */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_rvv( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_rvv( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_rvv(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->rvv = st::Particle_default_rvv( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_rvv(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_rvv( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_rvv( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* chi */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_chi( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_chi( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_chi(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->chi = st::Particle_default_chi( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_chi(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_chi( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_chi( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* charge_ratio */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::real_t
    Particle_default_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC const
        ParticleT *const SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::real_t{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_charge_ratio( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_charge_ratio(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->charge_ratio = st::Particle_default_charge_ratio( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_charge_ratio(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_charge_ratio( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_charge_ratio( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* state */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::index_t
    Particle_default_state( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::index_t{ 1 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_state( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_state(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->state = st::Particle_default_state( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_state(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_state( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_state( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* at_element */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::index_t
    Particle_default_at_element( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::index_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_at_element( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_at_element(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->at_element = st::Particle_default_at_element( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_at_element(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_at_element( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_at_element( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* at_turn */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::index_t
    Particle_default_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::index_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_at_turn( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_at_turn(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->at_turn = st::Particle_default_at_turn( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_at_turn(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_at_turn( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_at_turn( p ) );
    }

    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    /* id */

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename ParticleTraits<
        ParticleT >::index_t
    Particle_default_id( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
        SIXTRL_RESTRICT /* p */ = SIXTRL_NULLPTR )
    {
        static_assert( SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
            "ParticleT required to be a particle class" );

        return typename ParticleTraits< ParticleT >::index_t{ 0 };
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        !SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_id( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
        SIXTRL_RESTRICT /* p */ ) SIXTRL_NOEXCEPT
    {
        return SIXTRL_CXX_NAMESPACE::ARCH_STATUS_GENERAL_FAILURE;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_id(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        namespace st = SIXTRL_CXX_NAMESPACE;
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->id = st::Particle_default_id( p );
        return st::ARCH_STATUS_SUCCESS;
    }

    template< class ParticleT >
    SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename std::enable_if<
        SIXTRL_CXX_NAMESPACE::Particle_is_type< ParticleT >() &&
        !SIXTRL_CXX_NAMESPACE::Particle_impl_default< ParticleT >(),
        arch_status_t >::type
    Particle_set_default_id(
        SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
    {
        return SIXTRL_CXX_NAMESPACE::Particle_set_id( p,
            SIXTRL_CXX_NAMESPACE::Particle_default_id( p ) );
    }
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_FN SIXTRL_CXX_NAMESPACE::particle_num_elements_t
NS(Particle_num_particles)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
        *const SIXTRL_RESTRICT p = SIXTRL_NULLPTR ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_num_particles( p );
}

/* ------------------------------------------------------------------------- */
/* is_legal */

template< class RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_charge0_legal)(
    RealArg charge0 ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_charge0_legal( charge0 );
}

template< class RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_mass0_legal)(
    RealArg mass0 ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_mass0_legal( mass0 );
}

template< class RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_beta0_legal)(
    RealArg beta0 ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_beta0_legal( beta0 );
}

template< class RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_gamma0_legal)(
    RealArg gamma0 ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_gamma0_legal( gamma0 );
}

template< class RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_pc0_legal)(
    RealArg pc0 ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_pc0_legal( pc0 );
}

template< class RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_chi_legal)(
    RealArg chi ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_chi_legal( chi );
}

template< class RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_charge_ratio_legal)(
    RealArg charge_ratio ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_charge_ratio_legal( charge_ratio );
}

template< class IndexArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_state_legal)(
    IndexArg state ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_state_legal( state );
}

template< class IndexArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_at_element_legal)(
    IndexArg at_element ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_at_element_legal( at_element );
}

template< class IndexArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_at_turn_legal)(
    IndexArg at_turn ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_at_turn_legal( at_turn );
}

template< class IndexArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN bool NS(Particle_is_id_legal)(
    IndexArg id ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_is_id_legal( id );
}

/* ------------------------------------------------------------------------- */
/* setter: */

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg charge0 )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_charge0( p, charge0 );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg mass0 )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_mass0( p, mass0 );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg beta0 )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_beta0( p, beta0 );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg gamma0 )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_gamma0( p, gamma0 );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg pc0 )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_pc0( p, pc0 );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg s )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_s( p, s );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg x )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_x( p, x );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg px )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_px( p, px );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg y )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_y( p, y );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg py )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_py( p, py );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg zeta )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_zeta( p, zeta );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg delta )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_delta( p, delta );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg psigma )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_psigma( p, psigma );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg rpp )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_rpp( p, rpp );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg rvv )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_rvv( p, rvv );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, RealArg chi )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_chi( p, chi );
}

template< class ParticleT, typename RealArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_charge_ratio)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p, RealArg charge_ratio )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_charge_ratio( p, charge_ratio );
}

template< class ParticleT, typename IndexArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, IndexArg state )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_state( p, state );
}

template< class ParticleT, typename IndexArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_at_element)( SIXTRL_PARTICLE_ARGPTR_DEC ParticleT*
    SIXTRL_RESTRICT p, IndexArg at_element )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_at_element( p, at_element );
}

template< class ParticleT, typename IndexArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, IndexArg at_turn )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_at_turn( p, at_turn );
}

template< class ParticleT, typename IndexArg >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p, IndexArg id )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_id( p, id );
}

/* ------------------------------------------------------------------------- */
/* getter: */

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_charge0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_charge0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_mass0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_mass0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_beta0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_beta0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_gamma0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_gamma0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_pc0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_pc0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_s)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_s( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_x)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_x( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_px)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_px( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_y)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_y( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_py)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_py( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_zeta)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_zeta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_delta)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_delta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_psigma)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_psigma( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_rpp)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_rpp( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_rvv)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_rvv( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_chi)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_chi( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
            >::const_existing_type
NS(Particle_charge_ratio)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_charge_ratio( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
            >::const_existing_type
NS(Particle_state)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_state( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
            >::const_existing_type
NS(Particle_at_element)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_at_element( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
            >::const_existing_type
NS(Particle_at_turn)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_at_turn( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::TypeMethodParamTraits< typename
        SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
            >::const_existing_type
NS(Particle_id)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    return SIXTRL_CXX_NAMESPACE::Particle_id( p );
}

/* ------------------------------------------------------------------------- */
/* default: */

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_charge0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_charge0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_charge0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_mass0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_mass0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_mass0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_beta0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_beta0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_beta0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_gamma0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_gamma0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_gamma0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_pc0)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_pc0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_pc0( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_s)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_s( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_s( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_x)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_x( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_x( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_px)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_px( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_px( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_y)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_y( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_y( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_py)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_py( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_py( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_zeta)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_zeta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_zeta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_delta)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_delta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_delta( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_psigma)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_psigma( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_psigma( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_rpp)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_rpp( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_rpp( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_rvv)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_rvv( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_rvv( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_chi)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_chi( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_chi( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::real_t
NS(Particle_default_charge_ratio)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
    *const SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_charge_ratio( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_charge_ratio( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
NS(Particle_default_state)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_state( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_state( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
NS(Particle_default_at_element)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT
    *const SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_at_element( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_at_element( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
NS(Particle_default_at_turn)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_at_turn( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_at_turn( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN typename
    SIXTRL_CXX_NAMESPACE::ParticleTraits< ParticleT >::index_t
NS(Particle_default_id)( SIXTRL_PARTICLE_ARGPTR_DEC const ParticleT *const
    SIXTRL_RESTRICT p = SIXTRL_NULLPTR )
{
    return SIXTRL_CXX_NAMESPACE::Particle_default_id( p );
}

template< class ParticleT >
SIXTRL_STATIC SIXTRL_INLINE SIXTRL_FN SIXTRL_CXX_NAMESPACE::arch_status_t
NS(Particle_set_default_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC ParticleT* SIXTRL_RESTRICT p )
{
    return SIXTRL_CXX_NAMESPACE::Particle_set_default_id( p );
}

#endif /* c++ */

#if defined( __cplusplus ) && !defined( _GPUCODE )
extern "C" {
#endif /* C++, Host */

SIXTRL_STATIC SIXTRL_FN NS(particle_num_elements_t) NS(Particle_num_particles)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const
        SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* is_legal */

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_charge0_legal)(
    NS(particle_real_t) const charge0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_mass0_legal)(
    NS(particle_real_t) const mass0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_beta0_legal)(
    NS(particle_real_t) const beta0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_gamma0_legal)(
    NS(particle_real_t) const gamma0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_pc0_legal)(
    NS(particle_real_t) const pc0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_chi_legal)(
    NS(particle_real_t) const chi ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_charge_ratio_legal)(
    NS(particle_real_t) const charge_ratio ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_state_legal)(
    NS(particle_index_t) const state ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_at_element_legal)(
    NS(particle_index_t) const at_element ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_at_turn_legal)(
    NS(particle_index_t) const at_turn ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN bool NS(Particle_is_id_legal)(
    NS(particle_index_t) const id ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* setter: */

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const charge0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const mass0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const beta0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const gamma0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const pc0 ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const s ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const x ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const px ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const y ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const py ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const zeta ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const delta ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const psigma ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const rpp ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const rvv ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const chi ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const charge_ratio ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const state ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const at_element ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const at_turn ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const id ) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* getter: */

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t) NS(Particle_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t) NS(Particle_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t) NS(Particle_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t) NS(Particle_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t) NS(Particle_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT;

/* ------------------------------------------------------------------------- */
/* default: */

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_charge0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_mass0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_beta0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_gamma0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_pc0)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_s)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_x)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_px)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_y)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_py)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_zeta)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_delta)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_psigma)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_rpp)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_rvv)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_chi)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_real_t)
NS(Particle_default_charge_ratio)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t)
NS(Particle_default_state)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t)
NS(Particle_default_at_element)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t)
NS(Particle_default_at_turn)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(particle_index_t)
NS(Particle_default_id)( void ) SIXTRL_NOEXCEPT;

SIXTRL_STATIC SIXTRL_FN NS(arch_status_t) NS(Particle_set_default_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT;

#if defined( __cplusplus ) && !defined( _GPUCODE )
}
#endif /* C++, Host */

#if defined( __cplusplus ) && !defined( _GPUCODE )
extern "C" {
#endif /* C++, Host */

SIXTRL_INLINE NS(particle_num_elements_t) NS(Particle_num_particles)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT /*p*/
) SIXTRL_NOEXCEPT
{
    return ( NS(particle_num_elements_t) )0;
}

/* ------------------------------------------------------------------------- */
/* is_legal */

SIXTRL_INLINE bool NS(Particle_is_charge0_legal)(
    NS(particle_real_t) const charge0 ) SIXTRL_NOEXCEPT
{
    return ( NS(abs)( charge0 ) > ( NS(particle_real_t) )0 );
}

SIXTRL_INLINE bool NS(Particle_is_mass0_legal)(
    NS(particle_real_t) const mass0 ) SIXTRL_NOEXCEPT
{
    return ( mass0 > ( NS(particle_real_t) )0 );
}

SIXTRL_INLINE bool NS(Particle_is_beta0_legal)(
    NS(particle_real_t) const beta0 ) SIXTRL_NOEXCEPT
{
    return ( ( beta0 >= ( NS(particle_real_t) )0 ) &&
             ( beta0 <= ( NS(particle_real_t) )1 ) );
}

SIXTRL_INLINE bool NS(Particle_is_gamma0_legal)(
    NS(particle_real_t) const gamma0 ) SIXTRL_NOEXCEPT
{
    return ( gamma0 >= ( NS(particle_real_t) )1 );
}

SIXTRL_INLINE bool NS(Particle_is_pc0_legal)(
    NS(particle_real_t) const pc0 ) SIXTRL_NOEXCEPT
{
    return ( pc0 >= ( NS(particle_real_t) )0 );
}

SIXTRL_INLINE bool NS(Particle_is_chi_legal)(
    NS(particle_real_t) const chi ) SIXTRL_NOEXCEPT
{
    return ( chi >= ( NS(particle_real_t) )0 );
}

SIXTRL_INLINE bool NS(Particle_is_charge_ratio_legal)(
    NS(particle_real_t) const charge_ratio ) SIXTRL_NOEXCEPT
{
    return ( NS(abs)( charge_ratio ) >= ( NS(particle_real_t) )0 );
}

SIXTRL_INLINE bool NS(Particle_is_state_legal)(
    NS(particle_index_t) const state ) SIXTRL_NOEXCEPT
{
    return ( ( state >= ( NS(particle_index_t) )0 ) &&
             ( state <= ( NS(particle_index_t) )1 ) );
}

SIXTRL_INLINE bool NS(Particle_is_at_element_legal)(
    NS(particle_index_t) const at_element ) SIXTRL_NOEXCEPT
{
    return ( at_element >= ( NS(particle_index_t) )0 );
}

SIXTRL_INLINE bool NS(Particle_is_at_turn_legal)(
    NS(particle_index_t) const at_turn ) SIXTRL_NOEXCEPT
{
    return ( at_turn >= ( NS(particle_index_t) )0 );
}

SIXTRL_INLINE bool NS(Particle_is_id_legal)(
    NS(particle_index_t) const id ) SIXTRL_NOEXCEPT
{
    return ( id >= ( NS(particle_index_t) )0 );
}

/* ------------------------------------------------------------------------- */
/* setter: */

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const charge0 ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_charge0_legal)( charge0 ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->charge0 = charge0;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const mass0 ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_mass0_legal)( mass0 ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->mass0 = mass0;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const beta0 ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_beta0_legal)( beta0 ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->beta0 = beta0;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const gamma0 ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_gamma0_legal)( gamma0 ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->gamma0 = gamma0;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const pc0 ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_pc0_legal)( pc0 ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->pc0 = pc0;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const s ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->s = s;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const x ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->x = x;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const px ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->px = px;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const y ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->y = y;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const py ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->py = py;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const zeta ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->zeta = zeta;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const delta ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->delta = delta;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const psigma ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->psigma = psigma;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const rpp ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->rpp = rpp;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const rvv ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->rvv = rvv;
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const chi ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_chi_legal)( chi ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->chi = chi;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_real_t) const charge_ratio ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_charge_ratio_legal)( charge_ratio ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->charge_ratio = charge_ratio;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const state ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_state_legal)( state ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->state = state;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const at_element ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_at_element_legal)( at_element ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->at_element = at_element;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const at_turn ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_at_turn_legal)( at_turn ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->at_turn = at_turn;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p,
    NS(particle_index_t) const id ) SIXTRL_NOEXCEPT
{
    NS(arch_status_t) status = ( NS(arch_status_t)
        )SIXTRL_ARCH_STATUS_GENERAL_FAILURE;

    if( NS(Particle_is_id_legal)( id ) )
    {
        SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
        p->id = id;
        status = ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
    }

    return status;
}

/* ------------------------------------------------------------------------- */
/* getter: */

SIXTRL_INLINE NS(particle_real_t) NS(Particle_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->charge0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->mass0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->beta0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->gamma0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->pc0;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->s;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->x;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->px;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->y;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->py;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->zeta;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->delta;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->psigma;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->rpp;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->rvv;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->chi;
}

SIXTRL_INLINE NS(particle_real_t) NS(Particle_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->charge_ratio;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->state;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->at_element;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->at_turn;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC const NS(Particle) *const SIXTRL_RESTRICT p
) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    return p->id;
}

/* ------------------------------------------------------------------------- */
/* default: */

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_charge0)( void ) SIXTRL_NOEXCEPT
{
    return NS(PhysConst_charge0)();
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_charge0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->charge0 = NS(Particle_default_charge0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_mass0)( void ) SIXTRL_NOEXCEPT
{
    return NS(PhysConst_mass_proton_ev)();
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_mass0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->mass0 = NS(Particle_default_mass0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_beta0)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_beta0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->beta0 = NS(Particle_default_beta0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_gamma0)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_gamma0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->gamma0 = NS(Particle_default_gamma0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_pc0)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_pc0)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->pc0 = NS(Particle_default_pc0)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_s)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_s)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->s = NS(Particle_default_s)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_x)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_x)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->x = NS(Particle_default_x)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_px)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_px)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->px = NS(Particle_default_px)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_y)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_y)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->y = NS(Particle_default_y)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_py)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_py)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->py = NS(Particle_default_py)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_zeta)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_zeta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->zeta = NS(Particle_default_zeta)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_delta)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_delta)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->delta = NS(Particle_default_delta)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_psigma)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_psigma)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->psigma = NS(Particle_default_psigma)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_rpp)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_rpp)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->rpp = NS(Particle_default_rpp)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_rvv)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_rvv)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->rvv = NS(Particle_default_rvv)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_chi)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_chi)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->chi = NS(Particle_default_chi)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_real_t)
NS(Particle_default_charge_ratio)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_real_t) )1;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_charge_ratio)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->charge_ratio = NS(Particle_default_charge_ratio)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_index_t)
NS(Particle_default_state)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_index_t) )1;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_state)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->state = NS(Particle_default_state)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_index_t)
NS(Particle_default_at_element)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_index_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_at_element)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->at_element = NS(Particle_default_at_element)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_index_t)
NS(Particle_default_at_turn)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_index_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_at_turn)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->at_turn = NS(Particle_default_at_turn)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

SIXTRL_INLINE NS(particle_index_t) NS(Particle_default_id)( void ) SIXTRL_NOEXCEPT
{
    return ( NS(particle_index_t) )0;
}

SIXTRL_INLINE NS(arch_status_t) NS(Particle_set_default_id)(
    SIXTRL_PARTICLE_ARGPTR_DEC NS(Particle)* SIXTRL_RESTRICT p ) SIXTRL_NOEXCEPT
{
    SIXTRL_ASSERT( p != SIXTRL_NULLPTR );
    p->id = NS(Particle_default_id)();
    return ( NS(arch_status_t) )SIXTRL_ARCH_STATUS_SUCCESS;
}

#if defined( __cplusplus ) && !defined( _GPUCODE )
}
#endif /* C++, Host */

#endif /* SIXTRACKLIB_COMMON_PARTICLES_PARTICLE_UNIT_API_H__ */
